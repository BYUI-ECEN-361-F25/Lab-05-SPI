
ECEN-361-STM32-Lab-05-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006848  08006848  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006848  08006848  00007848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006850  08006850  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006850  08006850  00007850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006854  08006854  00007854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006858  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  2000006c  080068c4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080068c4  000084dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016da6  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003023  00000000  00000000  0001ee42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00021e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001100  00000000  00000000  00023420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029053  00000000  00000000  00024520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aba3  00000000  00000000  0004d573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b70  00000000  00000000  00068116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  00161ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800672c 	.word	0x0800672c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800672c 	.word	0x0800672c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	461a      	mov	r2, r3
 800056c:	460b      	mov	r3, r1
 800056e:	817b      	strh	r3, [r7, #10]
 8000570:	4613      	mov	r3, r2
 8000572:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
 8000578:	e038      	b.n	80005ec <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 800057a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10f      	bne.n	80005a2 <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 8000582:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	897b      	ldrh	r3, [r7, #10]
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f001 fc09 	bl	8001da8 <HAL_GPIO_WritePin>
			val >>= 1;
 8000596:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800059a:	085b      	lsrs	r3, r3, #1
 800059c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005a0:	e00f      	b.n	80005c2 <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005a2:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	09db      	lsrs	r3, r3, #7
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	897b      	ldrh	r3, [r7, #10]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f001 fbf8 	bl	8001da8 <HAL_GPIO_WritePin>
			val <<= 1;
 80005b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005c2:	893b      	ldrh	r3, [r7, #8]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f001 fbed 	bl	8001da8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fbe7 	bl	8001da8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fbe1 	bl	8001da8 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	3301      	adds	r3, #1
 80005ea:	75fb      	strb	r3, [r7, #23]
 80005ec:	7dfb      	ldrb	r3, [r7, #23]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	d9c3      	bls.n	800057a <shiftOut+0x1a>
	}
}
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <Clear_LEDs>:
    }
  }
}

void Clear_LEDs(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 fbce 	bl	8001da8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <Clear_LEDs+0x20>)
 8000612:	f001 fbc9 	bl	8001da8 <HAL_GPIO_WritePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	48000400 	.word	0x48000400

08000620 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000624:	22ff      	movs	r2, #255	@ 0xff
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <MultiFunctionShield_Clear+0x28>)
 8000628:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 800062a:	22ff      	movs	r2, #255	@ 0xff
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MultiFunctionShield_Clear+0x28>)
 800062e:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000630:	22ff      	movs	r2, #255	@ 0xff
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <MultiFunctionShield_Clear+0x28>)
 8000634:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000636:	22ff      	movs	r2, #255	@ 0xff
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <MultiFunctionShield_Clear+0x28>)
 800063a:	70da      	strb	r2, [r3, #3]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2000008c 	.word	0x2000008c

0800064c <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af02      	add	r7, sp, #8
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	4816      	ldr	r0, [pc, #88]	@ (80006b4 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 800065c:	f001 fba4 	bl	8001da8 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000660:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000664:	5cd3      	ldrb	r3, [r2, r3]
 8000666:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000672:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000676:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f7ff ff6f 	bl	8000560 <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000682:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000692:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f7ff ff5f 	bl	8000560 <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2120      	movs	r1, #32
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80006a8:	f001 fb7e 	bl	8001da8 <HAL_GPIO_WritePin>
	}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	48000400 	.word	0x48000400
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	080067c8 	.word	0x080067c8

080006c0 <MultiFunctionShield__ISRFunc>:




void MultiFunctionShield__ISRFunc(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MultiFunctionShield__ISRFunc+0x60>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3301      	adds	r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MultiFunctionShield__ISRFunc+0x60>)
 80006d0:	4611      	mov	r1, r2
 80006d2:	7019      	strb	r1, [r3, #0]
 80006d4:	4613      	mov	r3, r2
 80006d6:	3b01      	subs	r3, #1
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d81e      	bhi.n	800071a <MultiFunctionShield__ISRFunc+0x5a>
 80006dc:	a201      	add	r2, pc, #4	@ (adr r2, 80006e4 <MultiFunctionShield__ISRFunc+0x24>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080006fd 	.word	0x080006fd
 80006ec:	08000705 	.word	0x08000705
 80006f0:	0800070d 	.word	0x0800070d
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ffa9 	bl	800064c <MultiFunctionShield_WriteNumberToSegment>
 80006fa:	e00e      	b.n	800071a <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ffa5 	bl	800064c <MultiFunctionShield_WriteNumberToSegment>
 8000702:	e00a      	b.n	800071a <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff ffa1 	bl	800064c <MultiFunctionShield_WriteNumberToSegment>
 800070a:	e006      	b.n	800071a <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ff9d 	bl	800064c <MultiFunctionShield_WriteNumberToSegment>
 8000712:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <MultiFunctionShield__ISRFunc+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	bf00      	nop
  }
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000088 	.word	0x20000088

08000724 <lcd_write_nibble>:
#define LCD_ROWS 2 // Number of rows on the LCD
#define LCD_COLS 16 // Number of columns on the LCD

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
 uint8_t data = nibble << D4_BIT;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	73fb      	strb	r3, [r7, #15]
 data |= rs << RS_BIT;
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	4313      	orrs	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 data |= backlight_state << BL_BIT; // Include backlight state in data
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <lcd_write_nibble+0x7c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25a      	sxtb	r2, r3
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b25b      	sxtb	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
 data |= 1 << EN_BIT;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8000764:	f107 020f 	add.w	r2, r7, #15
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	214e      	movs	r1, #78	@ 0x4e
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <lcd_write_nibble+0x80>)
 8000772:	f001 fbcd 	bl	8001f10 <HAL_I2C_Master_Transmit>
 HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f001 f824 	bl	80017c4 <HAL_Delay>
 data &= ~(1 << EN_BIT);
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f023 0304 	bic.w	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8000786:	f107 020f 	add.w	r2, r7, #15
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	214e      	movs	r1, #78	@ 0x4e
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <lcd_write_nibble+0x80>)
 8000794:	f001 fbbc 	bl	8001f10 <HAL_I2C_Master_Transmit>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000090 	.word	0x20000090

080007a8 <lcd_write_byte>:

HAL_StatusTypeDef lcd_write_byte(uint8_t byte){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	char data_upper, data_lower;
	uint8_t data[4];
	data_upper = (byte&0xf0);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f023 030f 	bic.w	r3, r3, #15
 80007b8:	73fb      	strb	r3, [r7, #15]
	data_lower = ((byte<<4)&0xf0);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	73bb      	strb	r3, [r7, #14]
	data[0] = data_upper|0x0D;  //en=1, rs=0 -> bxxxx1101
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f043 030d 	orr.w	r3, r3, #13
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	723b      	strb	r3, [r7, #8]
	data[1] = data_upper|0x09;  //en=0, rs=0 -> bxxxx1001
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	f043 0309 	orr.w	r3, r3, #9
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	727b      	strb	r3, [r7, #9]
	data[2] = data_lower|0x0D;  //en=1, rs=0 -> bxxxx1101
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	f043 030d 	orr.w	r3, r3, #13
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	72bb      	strb	r3, [r7, #10]
	data[3] = data_lower|0x09;  //en=0, rs=0 -> bxxxx1001
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	f043 0309 	orr.w	r3, r3, #9
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Master_Transmit (&hi2c2, I2C_ADDR << 1, (uint8_t *) data, 4, 100);
 80007e8:	f107 0208 	add.w	r2, r7, #8
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2304      	movs	r3, #4
 80007f2:	214e      	movs	r1, #78	@ 0x4e
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <lcd_write_byte+0x5c>)
 80007f6:	f001 fb8b 	bl	8001f10 <HAL_I2C_Master_Transmit>
 80007fa:	4603      	mov	r3, r0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000090 	.word	0x20000090

08000808 <lcd_send_cmd>:
void lcd_send_cmd(uint8_t cmd) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
 uint8_t upper_nibble = cmd >> 4;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	091b      	lsrs	r3, r3, #4
 8000816:	73fb      	strb	r3, [r7, #15]
 uint8_t lower_nibble = cmd & 0x0F;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	73bb      	strb	r3, [r7, #14]
 lcd_write_nibble(upper_nibble, 0);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff7d 	bl	8000724 <lcd_write_nibble>
 lcd_write_nibble(lower_nibble, 0);
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff78 	bl	8000724 <lcd_write_nibble>
 if (cmd == 0x01 || cmd == 0x02) {
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d002      	beq.n	8000840 <lcd_send_cmd+0x38>
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d102      	bne.n	8000846 <lcd_send_cmd+0x3e>
 HAL_Delay(2);
 8000840:	2002      	movs	r0, #2
 8000842:	f000 ffbf 	bl	80017c4 <HAL_Delay>
 }
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <lcd_init>:
 uint8_t lower_nibble = data & 0x0F;
 lcd_write_nibble(upper_nibble, 1);
 lcd_write_nibble(lower_nibble, 1);
}

void lcd_init() {
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
 HAL_Delay(50);
 8000852:	2032      	movs	r0, #50	@ 0x32
 8000854:	f000 ffb6 	bl	80017c4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8000858:	2100      	movs	r1, #0
 800085a:	2003      	movs	r0, #3
 800085c:	f7ff ff62 	bl	8000724 <lcd_write_nibble>
 HAL_Delay(5);
 8000860:	2005      	movs	r0, #5
 8000862:	f000 ffaf 	bl	80017c4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	2003      	movs	r0, #3
 800086a:	f7ff ff5b 	bl	8000724 <lcd_write_nibble>
 HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 ffa8 	bl	80017c4 <HAL_Delay>
 lcd_write_nibble(0x03, 0);
 8000874:	2100      	movs	r1, #0
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff ff54 	bl	8000724 <lcd_write_nibble>
 HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 ffa1 	bl	80017c4 <HAL_Delay>
 lcd_write_nibble(0x02, 0);
 8000882:	2100      	movs	r1, #0
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff ff4d 	bl	8000724 <lcd_write_nibble>
 lcd_send_cmd(0x28);
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f7ff ffbc 	bl	8000808 <lcd_send_cmd>
 lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff ffb9 	bl	8000808 <lcd_send_cmd>
 lcd_send_cmd(0x06);
 8000896:	2006      	movs	r0, #6
 8000898:	f7ff ffb6 	bl	8000808 <lcd_send_cmd>
 lcd_send_cmd(0x01);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ffb3 	bl	8000808 <lcd_send_cmd>
 HAL_Delay(2);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f000 ff8e 	bl	80017c4 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <lcd_write_string>:
void lcd_write_string(char *str) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	 while (*str) {
 80008b4:	e019      	b.n	80008ea <lcd_write_string+0x3e>
		 if (*str == '\n' || *str == '\r'){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b0a      	cmp	r3, #10
 80008bc:	d003      	beq.n	80008c6 <lcd_write_string+0x1a>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b0d      	cmp	r3, #13
 80008c4:	d103      	bne.n	80008ce <lcd_write_string+0x22>
			 str++;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	e00d      	b.n	80008ea <lcd_write_string+0x3e>
		 }
		 else{
			 if (lcd_write_byte((uint8_t)*str++) == HAL_ERROR){
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff66 	bl	80007a8 <lcd_write_byte>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d103      	bne.n	80008ea <lcd_write_string+0x3e>
				 printf("Failed to Transmit over I2C\n\r");
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <lcd_write_string+0x50>)
 80008e4:	f005 f8b4 	bl	8005a50 <iprintf>
				 return;		// Return Without Continuing, if unable to transmit
 80008e8:	e004      	b.n	80008f4 <lcd_write_string+0x48>
	 while (*str) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1e1      	bne.n	80008b6 <lcd_write_string+0xa>
			 }
		 }
	 }
	 return;
 80008f2:	bf00      	nop
}
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	08006744 	.word	0x08006744

08000900 <lcd_clear>:
 address = 0x00;
 }
 address += column;
 lcd_send_cmd(0x80 | address);
}
void lcd_clear(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
lcd_send_cmd(0x01);
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff ff7f 	bl	8000808 <lcd_send_cmd>
 HAL_Delay(2);
 800090a:	2002      	movs	r0, #2
 800090c:	f000 ff5a 	bl	80017c4 <HAL_Delay>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <lcd_backlight>:
void lcd_backlight(uint8_t state) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
 if (state) {
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <lcd_backlight+0x18>
 backlight_state = 1;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <lcd_backlight+0x2c>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 } else {
 backlight_state = 0;
 }
}
 800092a:	e002      	b.n	8000932 <lcd_backlight+0x1e>
 backlight_state = 0;
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <lcd_backlight+0x2c>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t bytes_in =0;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094e:	f000 fef9 	bl	8001744 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f85f 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 f9ed 	bl	8000d34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800095a:	f000 f98b 	bl	8000c74 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800095e:	f000 f963 	bl	8000c28 <MX_TIM17_Init>
  MX_SPI2_Init();
 8000962:	f000 f927 	bl	8000bb4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000966:	f000 f8e7 	bl	8000b38 <MX_SPI1_Init>
  MX_I2C2_Init();
 800096a:	f000 f8a5 	bl	8000ab8 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800096e:	f000 f9b1 	bl	8000cd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCD
  lcd_init();
 8000972:	f7ff ff6c 	bl	800084e <lcd_init>
  lcd_clear();
 8000976:	f7ff ffc3 	bl	8000900 <lcd_clear>
  lcd_backlight(1); // Turn on backlight
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff ffca 	bl	8000914 <lcd_backlight>
  // Write a string to the LCD


  // Start timer
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000980:	481e      	ldr	r0, [pc, #120]	@ (80009fc <main+0xb8>)
 8000982:	f003 fecb 	bl	800471c <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 8000986:	f7ff fe4b 	bl	8000620 <MultiFunctionShield_Clear>
  Clear_LEDs();												// Clear the lights
 800098a:	f7ff fe37 	bl	80005fc <Clear_LEDs>
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);	// No SPI Out yet
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f001 fa06 	bl	8001da8 <HAL_GPIO_WritePin>
  printf("\033\143");
 800099c:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <main+0xbc>)
 800099e:	f005 f857 	bl	8005a50 <iprintf>
  printf("Welcome to ECEN-361 Lab-05 SPI/UART & Logic Analyzer \n\r");
 80009a2:	4818      	ldr	r0, [pc, #96]	@ (8000a04 <main+0xc0>)
 80009a4:	f005 f854 	bl	8005a50 <iprintf>
  while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bytes_in = Read_and_Transmit_Task();
 80009a8:	f000 fa96 	bl	8000ed8 <Read_and_Transmit_Task>
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]


    /**************** STEP 1:  Send it SPI-1 *********************/
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ba:	f001 f9f5 	bl	8001da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RX_Buffer, bytes_in , HAL_MAX_DELAY);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	4910      	ldr	r1, [pc, #64]	@ (8000a08 <main+0xc4>)
 80009c8:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <main+0xc8>)
 80009ca:	f003 fa60 	bl	8003e8e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, 1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f001 f9e6 	bl	8001da8 <HAL_GPIO_WritePin>

    /**************** STEP 2:  Send it I2C-2 *********************/
//	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)SLAVE_ADDRESS, RX_Buffer, bytes_in, HAL_MAX_DELAY);
	lcd_clear();
 80009dc:	f7ff ff90 	bl	8000900 <lcd_clear>
	lcd_write_string((char*) RX_Buffer);
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <main+0xc4>)
 80009e2:	f7ff ff63 	bl	80008ac <lcd_write_string>

    /**************** STEP 3:  Send it USART-3 *********************/
	HAL_UART_Transmit(&huart3, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	4906      	ldr	r1, [pc, #24]	@ (8000a08 <main+0xc4>)
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <main+0xcc>)
 80009f2:	f004 f945 	bl	8004c80 <HAL_UART_Transmit>
    bytes_in = Read_and_Transmit_Task();
 80009f6:	bf00      	nop
 80009f8:	e7d6      	b.n	80009a8 <main+0x64>
 80009fa:	bf00      	nop
 80009fc:	200001ac 	.word	0x200001ac
 8000a00:	08006764 	.word	0x08006764
 8000a04:	08006768 	.word	0x08006768
 8000a08:	20000308 	.word	0x20000308
 8000a0c:	200000e4 	.word	0x200000e4
 8000a10:	20000280 	.word	0x20000280

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	@ 0x58
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2244      	movs	r2, #68	@ 0x44
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 f869 	bl	8005afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a3a:	f001 fe41 	bl	80026c0 <HAL_PWREx_ControlVoltageScaling>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a44:	f000 faec 	bl	8001020 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a52:	2310      	movs	r3, #16
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a62:	230a      	movs	r3, #10
 8000a64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fe78 	bl	800276c <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a82:	f000 facd 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fa40 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 fab9 	bl	8001020 <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3758      	adds	r7, #88	@ 0x58
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_I2C2_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_I2C2_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000af4:	f001 f970 	bl	8001dd8 <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 fa8f 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000b06:	f001 fd35 	bl	8002574 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 fa86 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_I2C2_Init+0x74>)
 8000b18:	f001 fd77 	bl	800260a <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fa7d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000090 	.word	0x20000090
 8000b30:	40005800 	.word	0x40005800
 8000b34:	10909cec 	.word	0x10909cec

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /*   625KHz == SPI_BAUDRATEPRESCALER_128 ==> 80Mhz / 128
   *   40Mhz == SPI_BAUDRATEPRESCALER_2    ==> 80Mhz / 2
   */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <MX_SPI1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b52:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b6e:	2230      	movs	r2, #48	@ 0x30
 8000b70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b86:	2207      	movs	r2, #7
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b98:	f003 f8d6 	bl	8003d48 <HAL_SPI_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f000 fa3d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000e4 	.word	0x200000e4
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bba:	4a1a      	ldr	r2, [pc, #104]	@ (8000c24 <MX_SPI2_Init+0x70>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_SPI2_Init+0x6c>)
 8000c0c:	f003 f89c 	bl	8003d48 <HAL_SPI_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000c16:	f000 fa03 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000148 	.word	0x20000148
 8000c24:	40003800 	.word	0x40003800

08000c28 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <MX_TIM17_Init+0x48>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c34:	f240 321f 	movw	r2, #799	@ 0x31f
 8000c38:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c42:	2264      	movs	r2, #100	@ 0x64
 8000c44:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_TIM17_Init+0x44>)
 8000c5a:	f003 fd07 	bl	800466c <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000c64:	f000 f9dc 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200001ac 	.word	0x200001ac
 8000c70:	40014800 	.word	0x40014800

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <MX_USART2_UART_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb8:	f003 ff94 	bl	8004be4 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f000 f9ad 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001f8 	.word	0x200001f8
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	@ (8000d30 <MX_USART3_UART_Init+0x5c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_USART3_UART_Init+0x58>)
 8000d18:	f003 ff64 	bl	8004be4 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d22:	f000 f97d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000280 	.word	0x20000280
 8000d30:	40004800 	.word	0x40004800

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b60      	ldr	r3, [pc, #384]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a59      	ldr	r2, [pc, #356]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b57      	ldr	r3, [pc, #348]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b54      	ldr	r3, [pc, #336]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a53      	ldr	r2, [pc, #332]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b51      	ldr	r3, [pc, #324]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b4e      	ldr	r3, [pc, #312]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4a4d      	ldr	r2, [pc, #308]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000ecc <MX_GPIO_Init+0x198>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f000 fff8 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4844      	ldr	r0, [pc, #272]	@ (8000ed0 <MX_GPIO_Init+0x19c>)
 8000dbe:	f000 fff3 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2140      	movs	r1, #64	@ 0x40
 8000dc6:	4842      	ldr	r0, [pc, #264]	@ (8000ed0 <MX_GPIO_Init+0x19c>)
 8000dc8:	f000 ffee 	bl	8001da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	483c      	ldr	r0, [pc, #240]	@ (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000de4:	f000 fe36 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dec:	230b      	movs	r3, #11
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4836      	ldr	r0, [pc, #216]	@ (8000ed4 <MX_GPIO_Init+0x1a0>)
 8000dfc:	f000 fe2a 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Potentiometer_Pin */
  GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e04:	230b      	movs	r3, #11
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e16:	f000 fe1d 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f000 fe10 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8000e34:	2340      	movs	r3, #64	@ 0x40
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e38:	2311      	movs	r3, #17
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f000 fe01 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	481a      	ldr	r0, [pc, #104]	@ (8000ed0 <MX_GPIO_Init+0x19c>)
 8000e66:	f000 fdf5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin|SPI1_NSS_Pin;
 8000e6a:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 fde5 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <MX_GPIO_Init+0x19c>)
 8000ea2:	f000 fdd7 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000ea6:	2340      	movs	r3, #64	@ 0x40
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eaa:	2311      	movs	r3, #17
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_GPIO_Init+0x19c>)
 8000ebe:	f000 fdc9 	bl	8001a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	@ 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000800 	.word	0x48000800

08000ed8 <Read_and_Transmit_Task>:
		}
	}


uint8_t Read_and_Transmit_Task()
	{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b08e      	sub	sp, #56	@ 0x38
 8000edc:	af00      	add	r7, sp, #0
	/* Return the number of bytes */
	uint8_t receive_byte;
	// uint8_t receive_buffer[BUFFER_SIZE] = {0};
	// uint8_t *receive_buffer_ptr = receive_buffer;
	uint8_t bytes_in =0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t xmitmsg[] = "\n\rInput Line to Send ->";
 8000ee4:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <Read_and_Transmit_Task+0xe4>)
 8000ee6:	f107 0410 	add.w	r4, r7, #16
 8000eea:	461d      	mov	r5, r3
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef4:	e884 0003 	stmia.w	r4, {r0, r1}
	uint8_t sndmsg[] = "\n\rSending -> ";
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <Read_and_Transmit_Task+0xe8>)
 8000efa:	463c      	mov	r4, r7
 8000efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efe:	c407      	stmia	r4!, {r0, r1, r2}
 8000f00:	8023      	strh	r3, [r4, #0]
	uint8_t *xmitmsg_ptr = xmitmsg;
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t *sndmsg_ptr = sndmsg;
 8000f08:	463b      	mov	r3, r7
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		bytes_in = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		receive_byte = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		HAL_UART_Transmit(&huart2, xmitmsg_ptr, 23, HAL_MAX_DELAY);
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	2217      	movs	r2, #23
 8000f1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000f20:	4828      	ldr	r0, [pc, #160]	@ (8000fc4 <Read_and_Transmit_Task+0xec>)
 8000f22:	f003 fead 	bl	8004c80 <HAL_UART_Transmit>

		/* This task reads a line from the Serial/USB port and
		 * transmits out thru SPI
		 * Note that this is polling!  One byte at a time.  Very inefficient
		 */
		while (receive_byte != '\r')
 8000f26:	e016      	b.n	8000f56 <Read_and_Transmit_Task+0x7e>
		{
			while (HAL_UART_Receive(&huart2, &receive_byte, 1, 10) != HAL_OK) HAL_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fc4b 	bl	80017c4 <HAL_Delay>
 8000f2e:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 8000f32:	230a      	movs	r3, #10
 8000f34:	2201      	movs	r2, #1
 8000f36:	4823      	ldr	r0, [pc, #140]	@ (8000fc4 <Read_and_Transmit_Task+0xec>)
 8000f38:	f003 ff2b 	bl	8004d92 <HAL_UART_Receive>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f2      	bne.n	8000f28 <Read_and_Transmit_Task+0x50>
			/* Now we have a byte, if it's a carriage return, send the string
			 * If not, put it on the buffer
			 */
			RX_Buffer[bytes_in++] = receive_byte;
 8000f42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <Read_and_Transmit_Task+0xf0>)
 8000f54:	5499      	strb	r1, [r3, r2]
		while (receive_byte != '\r')
 8000f56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f5a:	2b0d      	cmp	r3, #13
 8000f5c:	d1e7      	bne.n	8000f2e <Read_and_Transmit_Task+0x56>
		}
			HAL_UART_Transmit(&huart2, (const uint8_t*) &RX_Buffer , bytes_in - 1, HAL_MAX_DELAY);  //echo entire message once completed
 8000f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	4916      	ldr	r1, [pc, #88]	@ (8000fc8 <Read_and_Transmit_Task+0xf0>)
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <Read_and_Transmit_Task+0xec>)
 8000f70:	f003 fe86 	bl	8004c80 <HAL_UART_Transmit>

		RX_Buffer[bytes_in++] = '\n'; // Add a line_feed
 8000f74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <Read_and_Transmit_Task+0xf0>)
 8000f82:	210a      	movs	r1, #10
 8000f84:	5499      	strb	r1, [r3, r2]
		RX_Buffer[bytes_in] = 0; // finish with null terminator character
 8000f86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <Read_and_Transmit_Task+0xf0>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	54d1      	strb	r1, [r2, r3]
		// Tell the User what we got and what we're sending
		HAL_UART_Transmit(&huart2, sndmsg_ptr, 13, HAL_MAX_DELAY);
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	220d      	movs	r2, #13
 8000f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f98:	480a      	ldr	r0, [pc, #40]	@ (8000fc4 <Read_and_Transmit_Task+0xec>)
 8000f9a:	f003 fe71 	bl	8004c80 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, receive_buffer_ptr, bytes_in, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, RX_Buffer, bytes_in, HAL_MAX_DELAY);
 8000f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <Read_and_Transmit_Task+0xf0>)
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <Read_and_Transmit_Task+0xec>)
 8000fac:	f003 fe68 	bl	8004c80 <HAL_UART_Transmit>
		// Now send it from the SPI Master (SPI_1) -> SPI Slave (SPI_2)
		// Turn on the ChipEnable (SPI1_NSS -- active low)
		return bytes_in;
 8000fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
		}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3738      	adds	r7, #56	@ 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	080067a0 	.word	0x080067a0
 8000fc0:	080067b8 	.word	0x080067b8
 8000fc4:	200001f8 	.word	0x200001f8
 8000fc8:	20000308 	.word	0x20000308

08000fcc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fd4:	1d39      	adds	r1, r7, #4
 8000fd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <__io_putchar+0x20>)
 8000fde:	f003 fe4f 	bl	8004c80 <HAL_UART_Transmit>

  return ch;
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001f8 	.word	0x200001f8

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001000:	f7ff fb5e 	bl	80006c0 <MultiFunctionShield__ISRFunc>



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 800100e:	f000 fbb9 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001ac 	.word	0x200001ac

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6613      	str	r3, [r2, #96]	@ 0x60
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ac      	sub	sp, #176	@ 0xb0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2288      	movs	r2, #136	@ 0x88
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f004 fd30 	bl	8005afa <memset>
  if(hi2c->Instance==I2C2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <HAL_I2C_MspInit+0xb0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d13b      	bne.n	800111c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 f98d 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010bc:	f7ff ffb0 	bl	8001020 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010d8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e0:	2312      	movs	r3, #18
 80010e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010fc:	4619      	mov	r1, r3
 80010fe:	480b      	ldr	r0, [pc, #44]	@ (800112c <HAL_I2C_MspInit+0xb8>)
 8001100:	f000 fca8 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 800110a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800110e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_I2C_MspInit+0xb4>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	37b0      	adds	r7, #176	@ 0xb0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005800 	.word	0x40005800
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a41      	ldr	r2, [pc, #260]	@ (8001254 <HAL_SPI_MspInit+0x124>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d129      	bne.n	80011a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001152:	4b41      	ldr	r3, [pc, #260]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001156:	4a40      	ldr	r2, [pc, #256]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115c:	6613      	str	r3, [r2, #96]	@ 0x60
 800115e:	4b3e      	ldr	r3, [pc, #248]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b3b      	ldr	r3, [pc, #236]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a3a      	ldr	r2, [pc, #232]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001182:	23a0      	movs	r3, #160	@ 0xa0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001192:	2305      	movs	r3, #5
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a0:	f000 fc58 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011a4:	e051      	b.n	800124a <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a2c      	ldr	r2, [pc, #176]	@ (800125c <HAL_SPI_MspInit+0x12c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d14c      	bne.n	800124a <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011b0:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	4a28      	ldr	r2, [pc, #160]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80011bc:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_SPI_MspInit+0x128>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011f8:	2308      	movs	r3, #8
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001208:	2305      	movs	r3, #5
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4813      	ldr	r0, [pc, #76]	@ (8001260 <HAL_SPI_MspInit+0x130>)
 8001214:	f000 fc1e 	bl	8001a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001218:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122a:	2305      	movs	r3, #5
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <HAL_SPI_MspInit+0x134>)
 8001236:	f000 fc0d 	bl	8001a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2024      	movs	r0, #36	@ 0x24
 8001240:	f000 fb9c 	bl	800197c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001244:	2024      	movs	r0, #36	@ 0x24
 8001246:	f000 fbb5 	bl	80019b4 <HAL_NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	@ 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013000 	.word	0x40013000
 8001258:	40021000 	.word	0x40021000
 800125c:	40003800 	.word	0x40003800
 8001260:	48000800 	.word	0x48000800
 8001264:	48000400 	.word	0x48000400

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	4a0c      	ldr	r2, [pc, #48]	@ (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001284:	6613      	str	r3, [r2, #96]	@ 0x60
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201a      	movs	r0, #26
 8001298:	f000 fb70 	bl	800197c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800129c:	201a      	movs	r0, #26
 800129e:	f000 fb89 	bl	80019b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40014800 	.word	0x40014800
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ae      	sub	sp, #184	@ 0xb8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2288      	movs	r2, #136	@ 0x88
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fc10 	bl	8005afa <memset>
  if(huart->Instance==USART2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a42      	ldr	r2, [pc, #264]	@ (80013e8 <HAL_UART_MspInit+0x134>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d13c      	bne.n	800135e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f86d 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012fc:	f7ff fe90 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001300:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001304:	4a39      	ldr	r2, [pc, #228]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130a:	6593      	str	r3, [r2, #88]	@ 0x58
 800130c:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a33      	ldr	r2, [pc, #204]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001330:	230c      	movs	r3, #12
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001358:	f000 fb7c 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800135c:	e03f      	b.n	80013de <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <HAL_UART_MspInit+0x13c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d13a      	bne.n	80013de <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001368:	2304      	movs	r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4618      	mov	r0, r3
 8001376:	f002 f82b 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001380:	f7ff fe4e 	bl	8001020 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001388:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <HAL_UART_MspInit+0x138>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <HAL_UART_MspInit+0x138>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_UART_MspInit+0x138>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013b4:	2330      	movs	r3, #48	@ 0x30
 80013b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <HAL_UART_MspInit+0x140>)
 80013da:	f000 fb3b 	bl	8001a54 <HAL_GPIO_Init>
}
 80013de:	bf00      	nop
 80013e0:	37b8      	adds	r7, #184	@ 0xb8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004400 	.word	0x40004400
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40004800 	.word	0x40004800
 80013f4:	48000800 	.word	0x48000800

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_InitTick+0xe0>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	4a33      	ldr	r2, [pc, #204]	@ (80014d8 <HAL_InitTick+0xe0>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6593      	str	r3, [r2, #88]	@ 0x58
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_InitTick+0xe0>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141e:	f107 0210 	add.w	r2, r7, #16
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff3f 	bl	80032ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001438:	f001 ff0c 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800143c:	6378      	str	r0, [r7, #52]	@ 0x34
 800143e:	e004      	b.n	800144a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001440:	f001 ff08 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8001444:	4603      	mov	r3, r0
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800144c:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_InitTick+0xe4>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3b01      	subs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <HAL_InitTick+0xe8>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <HAL_InitTick+0xe8>)
 8001462:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001468:	4a1d      	ldr	r2, [pc, #116]	@ (80014e0 <HAL_InitTick+0xe8>)
 800146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <HAL_InitTick+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_InitTick+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_InitTick+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001480:	4817      	ldr	r0, [pc, #92]	@ (80014e0 <HAL_InitTick+0xe8>)
 8001482:	f003 f8f3 	bl	800466c <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800148c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11b      	bne.n	80014cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001494:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <HAL_InitTick+0xe8>)
 8001496:	f003 f941 	bl	800471c <HAL_TIM_Base_Start_IT>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a8:	201c      	movs	r0, #28
 80014aa:	f000 fa83 	bl	80019b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d808      	bhi.n	80014c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	201c      	movs	r0, #28
 80014ba:	f000 fa5f 	bl	800197c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_InitTick+0xec>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e002      	b.n	80014cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3738      	adds	r7, #56	@ 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	431bde83 	.word	0x431bde83
 80014e0:	2000033c 	.word	0x2000033c
 80014e4:	20000008 	.word	0x20000008

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800154e:	f003 f955 	bl	80047fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001ac 	.word	0x200001ac

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f003 f94b 	bl	80047fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000033c 	.word	0x2000033c

08001570 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <SPI2_IRQHandler+0x10>)
 8001576:	f002 fe01 	bl	800417c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000148 	.word	0x20000148

08001584 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
  }

  return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fcf7 	bl	8000fcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
  }
  return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161e:	605a      	str	r2, [r3, #4]
  return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f004 fa82 	bl	8005b98 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20018000 	.word	0x20018000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000388 	.word	0x20000388
 80016c8:	200004e0 	.word	0x200004e0

080016cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f004 fa41 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7ff f90f 	bl	8000944 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001734:	08006858 	.word	0x08006858
  ldr r2, =_sbss
 8001738:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800173c:	200004dc 	.word	0x200004dc

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>
	...

08001744 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <HAL_Init+0x3c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_Init+0x3c>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001758:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175a:	2003      	movs	r0, #3
 800175c:	f000 f903 	bl	8001966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001760:	200f      	movs	r0, #15
 8001762:	f7ff fe49 	bl	80013f8 <HAL_InitTick>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	e001      	b.n	8001776 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001772:	f7ff fc5b 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001776:	79fb      	ldrb	r3, [r7, #7]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	2000038c 	.word	0x2000038c

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000038c 	.word	0x2000038c

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff4c 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198e:	f7ff ff61 	bl	8001854 <__NVIC_GetPriorityGrouping>
 8001992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	68b9      	ldr	r1, [r7, #8]
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7ff ffb1 	bl	8001900 <NVIC_EncodePriority>
 800199e:	4602      	mov	r2, r0
 80019a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff80 	bl	80018ac <__NVIC_SetPriority>
}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff54 	bl	8001870 <__NVIC_EnableIRQ>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d005      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2204      	movs	r2, #4
 80019ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e029      	b.n	8001a48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f003 021c 	and.w	r2, r3, #28
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
    }
  }
  return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e17f      	b.n	8001d64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8171 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x40>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 0201 	and.w	r2, r3, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d118      	bne.n	8001b34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80ac 	beq.w	8001d5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c12:	4b5c      	ldr	r3, [pc, #368]	@ (8001d84 <HAL_GPIO_Init+0x330>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d88 <HAL_GPIO_Init+0x334>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x242>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <HAL_GPIO_Init+0x338>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <HAL_GPIO_Init+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <HAL_GPIO_Init+0x340>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <HAL_GPIO_Init+0x344>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <HAL_GPIO_Init+0x348>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	@ (8001da0 <HAL_GPIO_Init+0x34c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x22a>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x244>
 8001c96:	2300      	movs	r3, #0
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca8:	4937      	ldr	r1, [pc, #220]	@ (8001d88 <HAL_GPIO_Init+0x334>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_GPIO_Init+0x350>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae78 	bne.w	8001a64 <HAL_GPIO_Init+0x10>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48000800 	.word	0x48000800
 8001d94:	48000c00 	.word	0x48000c00
 8001d98:	48001000 	.word	0x48001000
 8001d9c:	48001400 	.word	0x48001400
 8001da0:	48001800 	.word	0x48001800
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db8:	787b      	ldrb	r3, [r7, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08d      	b.n	8001f06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f938 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e006      	b.n	8001e60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d108      	bne.n	8001e7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	e007      	b.n	8001e8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
 8001f20:	4613      	mov	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	f040 80fd 	bne.w	800212c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x30>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0f6      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f48:	f7ff fc30 	bl	80017ac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2319      	movs	r3, #25
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f914 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0e1      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	@ 0x21
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2bff      	cmp	r3, #255	@ 0xff
 8001f9a:	d906      	bls.n	8001faa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	22ff      	movs	r2, #255	@ 0xff
 8001fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001fa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e007      	b.n	8001fba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001fb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fb8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d024      	beq.n	800200c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <HAL_I2C_Master_Transmit+0x228>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fa83 	bl	8002510 <I2C_TransferConfig>
 800200a:	e066      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <HAL_I2C_Master_Transmit+0x228>)
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa78 	bl	8002510 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002020:	e05b      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	6a39      	ldr	r1, [r7, #32]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f907 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07b      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d034      	beq.n	80020da <HAL_I2C_Master_Transmit+0x1ca>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d130      	bne.n	80020da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	2200      	movs	r2, #0
 8002080:	2180      	movs	r1, #128	@ 0x80
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f880 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04d      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	2bff      	cmp	r3, #255	@ 0xff
 800209a:	d90e      	bls.n	80020ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	22ff      	movs	r2, #255	@ 0xff
 80020a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	8979      	ldrh	r1, [r7, #10]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa2c 	bl	8002510 <I2C_TransferConfig>
 80020b8:	e00f      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fa1b 	bl	8002510 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d19e      	bne.n	8002022 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	6a39      	ldr	r1, [r7, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f8ed 	bl	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e01a      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <HAL_I2C_Master_Transmit+0x22c>)
 800210c:	400b      	ands	r3, r1
 800210e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	80002000 	.word	0x80002000
 800213c:	fe00e800 	.word	0xfe00e800

08002140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d103      	bne.n	800215e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d007      	beq.n	800217c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	619a      	str	r2, [r3, #24]
  }
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002198:	e03b      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8d6 	bl	8002350 <I2C_IsErrorOccurred>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e041      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d02d      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff faf9 	bl	80017ac <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d122      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	429a      	cmp	r2, r3
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d113      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d0b4      	beq.n	800219a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002246:	e033      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f87f 	bl	8002350 <I2C_IsErrorOccurred>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e031      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d025      	beq.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7ff faa2 	bl	80017ac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11a      	bne.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d013      	beq.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d1c4      	bne.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d4:	e02f      	b.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f838 	bl	8002350 <I2C_IsErrorOccurred>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02d      	b.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7ff fa5f 	bl	80017ac <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b20      	cmp	r3, #32
 800230c:	d013      	beq.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b20      	cmp	r3, #32
 8002342:	d1c8      	bne.n	80022d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d068      	beq.n	800244e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2210      	movs	r2, #16
 8002382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002384:	e049      	b.n	800241a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d045      	beq.n	800241a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff fa0d 	bl	80017ac <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_IsErrorOccurred+0x54>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d13a      	bne.n	800241a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c6:	d121      	bne.n	800240c <I2C_IsErrorOccurred+0xbc>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023ce:	d01d      	beq.n	800240c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d01a      	beq.n	800240c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023e6:	f7ff f9e1 	bl	80017ac <HAL_GetTick>
 80023ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ec:	e00e      	b.n	800240c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ee:	f7ff f9dd 	bl	80017ac <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b19      	cmp	r3, #25
 80023fa:	d907      	bls.n	800240c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800240a:	e006      	b.n	800241a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b20      	cmp	r3, #32
 8002418:	d1e9      	bne.n	80023ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b20      	cmp	r3, #32
 8002426:	d003      	beq.n	8002430 <I2C_IsErrorOccurred+0xe0>
 8002428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0aa      	beq.n	8002386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fe3b 	bl	8002140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <I2C_IsErrorOccurred+0x1bc>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	fe00e800 	.word	0xfe00e800

08002510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	817b      	strh	r3, [r7, #10]
 800251e:	4613      	mov	r3, r2
 8002520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002528:	7a7b      	ldrb	r3, [r7, #9]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002530:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	4313      	orrs	r3, r2
 800253a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <I2C_TransferConfig+0x60>)
 8002550:	430b      	orrs	r3, r1
 8002552:	43db      	mvns	r3, r3
 8002554:	ea02 0103 	and.w	r1, r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	03ff63ff 	.word	0x03ff63ff

08002574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d138      	bne.n	80025fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002594:	2302      	movs	r3, #2
 8002596:	e032      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	@ 0x24
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d139      	bne.n	8002694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800262a:	2302      	movs	r3, #2
 800262c:	e033      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2224      	movs	r2, #36	@ 0x24
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800265c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_PWREx_GetVoltageRange+0x18>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40007000 	.word	0x40007000

080026c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ce:	d130      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d0:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026dc:	d038      	beq.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2232      	movs	r2, #50	@ 0x32
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002704:	e002      	b.n	800270c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b01      	subs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002718:	d102      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f2      	bne.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272c:	d110      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e00f      	b.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d007      	beq.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002748:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	20000004 	.word	0x20000004
 8002768:	431bde83 	.word	0x431bde83

0800276c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e3ca      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b97      	ldr	r3, [pc, #604]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b94      	ldr	r3, [pc, #592]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80e4 	beq.w	8002968 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f040 808b 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8087 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	4b89      	ldr	r3, [pc, #548]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e3a2      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_RCC_OscConfig+0x7c>
 80027de:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_OscConfig+0x88>
 80027e8:	4b7c      	ldr	r3, [pc, #496]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d223      	bcs.n	8002840 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd87 	bl	8003310 <RCC_SetFlashLatencyFromMSIRange>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e383      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a72      	ldr	r2, [pc, #456]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b70      	ldr	r3, [pc, #448]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	496d      	ldr	r1, [pc, #436]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4968      	ldr	r1, [pc, #416]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e025      	b.n	800288c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	4b66      	ldr	r3, [pc, #408]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b63      	ldr	r3, [pc, #396]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4960      	ldr	r1, [pc, #384]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b5f      	ldr	r3, [pc, #380]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	495b      	ldr	r1, [pc, #364]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd47 	bl	8003310 <RCC_SetFlashLatencyFromMSIRange>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e343      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288c:	f000 fc4a 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4950      	ldr	r1, [pc, #320]	@ (80029e0 <HAL_RCC_OscConfig+0x274>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a4e      	ldr	r2, [pc, #312]	@ (80029e4 <HAL_RCC_OscConfig+0x278>)
 80028aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ac:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fda1 	bl	80013f8 <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d052      	beq.n	8002966 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	e327      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028cc:	4b43      	ldr	r3, [pc, #268]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a42      	ldr	r2, [pc, #264]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d8:	f7fe ff68 	bl	80017ac <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7fe ff64 	bl	80017ac <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e310      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a36      	ldr	r2, [pc, #216]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4931      	ldr	r1, [pc, #196]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291c:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	492c      	ldr	r1, [pc, #176]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e01a      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293e:	f7fe ff35 	bl	80017ac <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002946:	f7fe ff31 	bl	80017ac <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e2dd      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x1da>
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002966:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d074      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x21a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d10e      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d064      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e2ba      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x24a>
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029be:	d115      	bne.n	80029ec <HAL_RCC_OscConfig+0x280>
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a02      	ldr	r2, [pc, #8]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	080067cc 	.word	0x080067cc
 80029e4:	20000004 	.word	0x20000004
 80029e8:	20000008 	.word	0x20000008
 80029ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fece 	bl	80017ac <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe feca 	bl	80017ac <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e276      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2a8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe feba 	bl	80017ac <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe feb6 	bl	80017ac <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e262      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d0>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x310>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d116      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e23f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b76      	ldr	r3, [pc, #472]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4973      	ldr	r1, [pc, #460]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa8:	e040      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fe75 	bl	80017ac <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fe71 	bl	80017ac <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e21d      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b62      	ldr	r3, [pc, #392]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	495f      	ldr	r1, [pc, #380]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5c      	ldr	r2, [pc, #368]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fe51 	bl	80017ac <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fe4d 	bl	80017ac <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1f9      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b46:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe2c 	bl	80017ac <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fe28 	bl	80017ac <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1d4      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3ec>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fe0f 	bl	80017ac <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fe0b 	bl	80017ac <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1b7      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4b32      	ldr	r3, [pc, #200]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fdd2 	bl	80017ac <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe fdce 	bl	80017ac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e17a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c42:	e029      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d115      	bne.n	8002c78 <HAL_RCC_OscConfig+0x50c>
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a03      	ldr	r2, [pc, #12]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	4b9c      	ldr	r3, [pc, #624]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	4a9b      	ldr	r2, [pc, #620]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c88:	4b98      	ldr	r3, [pc, #608]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a97      	ldr	r2, [pc, #604]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fd84 	bl	80017ac <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fd80 	bl	80017ac <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e12a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ed      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x53c>
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fd6d 	bl	80017ac <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fd69 	bl	80017ac <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e113      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ed      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b7a      	ldr	r3, [pc, #488]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4a79      	ldr	r2, [pc, #484]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80fe 	beq.w	8002f12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 80d0 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d20:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d130      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d127      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d60:	2a07      	cmp	r2, #7
 8002d62:	bf14      	ite	ne
 8002d64:	2201      	movne	r2, #1
 8002d66:	2200      	moveq	r2, #0
 8002d68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d113      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d06e      	beq.n	8002e74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d069      	beq.n	8002e70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0ad      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db8:	4b4c      	ldr	r3, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc4:	f7fe fcf2 	bl	80017ac <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fcee 	bl	80017ac <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e09a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x784>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e04:	0212      	lsls	r2, r2, #8
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0552      	lsls	r2, r2, #21
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0652      	lsls	r2, r2, #25
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e24:	0912      	lsrs	r2, r2, #4
 8002e26:	0452      	lsls	r2, r2, #17
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fe fcb0 	bl	80017ac <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fcac 	bl	80017ac <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e058      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e050      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d148      	bne.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fe fc88 	bl	80017ac <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fc84 	bl	80017ac <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e030      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x734>
 8002ebe:	e028      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d023      	beq.n	8002f0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fc6b 	bl	80017ac <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fc67 	bl	80017ac <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d905      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e013      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ec      	bne.n	8002eda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4905      	ldr	r1, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x7b4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	feeefffc 	.word	0xfeeefffc

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0e7      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b72      	ldr	r3, [pc, #456]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4970      	ldr	r1, [pc, #448]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cf      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4960      	ldr	r1, [pc, #384]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04c      	beq.n	800303c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0a6      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09a      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e08e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fea:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e086      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4943      	ldr	r1, [pc, #268]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe fbce 	bl	80017ac <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe fbca 	bl	80017ac <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e06e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	492b      	ldr	r1, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d210      	bcs.n	800309a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4923      	ldr	r1, [pc, #140]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e036      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4918      	ldr	r1, [pc, #96]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4910      	ldr	r1, [pc, #64]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d8:	f000 f824 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	490b      	ldr	r1, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1fc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f97b 	bl	80013f8 <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	72fb      	strb	r3, [r7, #11]

  return status;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	080067cc 	.word	0x080067cc
 800311c:	20000004 	.word	0x20000004
 8003120:	20000008 	.word	0x20000008

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d121      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d11e      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003180:	4a2b      	ldr	r2, [pc, #172]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d134      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xa6>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xac>
 80031c8:	e005      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031cc:	617b      	str	r3, [r7, #20]
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031d2:	617b      	str	r3, [r7, #20]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fb03 f202 	mul.w	r2, r3, r2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0e5b      	lsrs	r3, r3, #25
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800321c:	69bb      	ldr	r3, [r7, #24]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	080067e4 	.word	0x080067e4
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	080067dc 	.word	0x080067dc

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003284:	f7ff ffda 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	080067dc 	.word	0x080067dc

080032ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	220f      	movs	r2, #15
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032bc:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_RCC_GetClockConfig+0x5c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_GetClockConfig+0x5c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_GetClockConfig+0x5c>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032ee:	4b07      	ldr	r3, [pc, #28]	@ (800330c <HAL_RCC_GetClockConfig+0x60>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0207 	and.w	r2, r3, #7
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40022000 	.word	0x40022000

08003310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800331c:	4b2a      	ldr	r3, [pc, #168]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003328:	f7ff f9bc 	bl	80026a4 <HAL_PWREx_GetVoltageRange>
 800332c:	6178      	str	r0, [r7, #20]
 800332e:	e014      	b.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333a:	6593      	str	r3, [r2, #88]	@ 0x58
 800333c:	4b22      	ldr	r3, [pc, #136]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003348:	f7ff f9ac 	bl	80026a4 <HAL_PWREx_GetVoltageRange>
 800334c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b1e      	ldr	r3, [pc, #120]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003360:	d10b      	bne.n	800337a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b80      	cmp	r3, #128	@ 0x80
 8003366:	d919      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2ba0      	cmp	r3, #160	@ 0xa0
 800336c:	d902      	bls.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800336e:	2302      	movs	r3, #2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e013      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003374:	2301      	movs	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e010      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b80      	cmp	r3, #128	@ 0x80
 800337e:	d902      	bls.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003380:	2303      	movs	r3, #3
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e00a      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	@ 0x80
 800338a:	d102      	bne.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800338c:	2302      	movs	r3, #2
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e004      	b.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b70      	cmp	r3, #112	@ 0x70
 8003396:	d101      	bne.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003398:	2301      	movs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 0207 	bic.w	r2, r3, #7
 80033a4:	4909      	ldr	r1, [pc, #36]	@ (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40022000 	.word	0x40022000

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d8:	2300      	movs	r3, #0
 80033da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033dc:	2300      	movs	r3, #0
 80033de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d041      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033f4:	d02a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033fa:	d824      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003406:	d81e      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003410:	d010      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003412:	e018      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003414:	4b86      	ldr	r3, [pc, #536]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a85      	ldr	r2, [pc, #532]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003420:	e015      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fabb 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003432:	e00c      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3320      	adds	r3, #32
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fba6 	bl	8003b8c <RCCEx_PLLSAI2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	74fb      	strb	r3, [r7, #19]
      break;
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800344c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003454:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003462:	4973      	ldr	r1, [pc, #460]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800346a:	e001      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d041      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003480:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003484:	d02a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003486:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800348a:	d824      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800348c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003490:	d008      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003496:	d81e      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d010      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034a2:	e018      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034a4:	4b62      	ldr	r3, [pc, #392]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a61      	ldr	r2, [pc, #388]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034b0:	e015      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fa73 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034c2:	e00c      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3320      	adds	r3, #32
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fb5e 	bl	8003b8c <RCCEx_PLLSAI2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	74fb      	strb	r3, [r7, #19]
      break;
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034e4:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f2:	494f      	ldr	r1, [pc, #316]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034fa:	e001      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a0 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	4a40      	ldr	r2, [pc, #256]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	@ 0x58
 8003534:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003540:	2301      	movs	r3, #1
 8003542:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003544:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a3a      	ldr	r2, [pc, #232]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003550:	f7fe f92c 	bl	80017ac <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003556:	e009      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003558:	f7fe f928 	bl	80017ac <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	74fb      	strb	r3, [r7, #19]
        break;
 800356a:	e005      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800356c:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d15c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357e:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003588:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	d019      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	4a20      	ldr	r2, [pc, #128]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035be:	4a1c      	ldr	r2, [pc, #112]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c8:	4a19      	ldr	r2, [pc, #100]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe f8e7 	bl	80017ac <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e0:	e00b      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe f8e3 	bl	80017ac <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d902      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	74fb      	strb	r3, [r7, #19]
            break;
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ec      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360e:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361e:	4904      	ldr	r1, [pc, #16]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003626:	e009      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363c:	7c7b      	ldrb	r3, [r7, #17]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b9e      	ldr	r3, [pc, #632]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	4a9d      	ldr	r2, [pc, #628]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800365a:	4b98      	ldr	r3, [pc, #608]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	f023 0203 	bic.w	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	4994      	ldr	r1, [pc, #592]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800367c:	4b8f      	ldr	r3, [pc, #572]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f023 020c 	bic.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	498c      	ldr	r1, [pc, #560]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369e:	4b87      	ldr	r3, [pc, #540]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	4983      	ldr	r1, [pc, #524]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036c0:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	497b      	ldr	r1, [pc, #492]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f0:	4972      	ldr	r1, [pc, #456]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003704:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003712:	496a      	ldr	r1, [pc, #424]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003726:	4b65      	ldr	r3, [pc, #404]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	4961      	ldr	r1, [pc, #388]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003748:	4b5c      	ldr	r3, [pc, #368]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003756:	4959      	ldr	r1, [pc, #356]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800376a:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	4950      	ldr	r1, [pc, #320]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378c:	4b4b      	ldr	r3, [pc, #300]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	4948      	ldr	r1, [pc, #288]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ae:	4b43      	ldr	r3, [pc, #268]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037bc:	493f      	ldr	r1, [pc, #252]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d0:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037de:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b32      	ldr	r3, [pc, #200]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a31      	ldr	r2, [pc, #196]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e011      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f8c8 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d028      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800382e:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	491f      	ldr	r1, [pc, #124]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800384c:	d106      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003858:	60d3      	str	r3, [r2, #12]
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f899 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038aa:	d109      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a02      	ldr	r2, [pc, #8]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038b6:	60d3      	str	r3, [r2, #12]
 80038b8:	e014      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f867 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02f      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f0:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038fe:	4928      	ldr	r1, [pc, #160]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800390e:	d10d      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	2102      	movs	r1, #2
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f844 	bl	80039a4 <RCCEx_PLLSAI1_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d014      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	74bb      	strb	r3, [r7, #18]
 800392a:	e011      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3320      	adds	r3, #32
 800393a:	2102      	movs	r1, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f925 	bl	8003b8c <RCCEx_PLLSAI2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800395c:	4b10      	ldr	r3, [pc, #64]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800396a:	490d      	ldr	r1, [pc, #52]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800397e:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398e:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003996:	7cbb      	ldrb	r3, [r7, #18]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b2:	4b75      	ldr	r3, [pc, #468]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039be:	4b72      	ldr	r3, [pc, #456]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0203 	and.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10d      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
       ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
       ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d047      	beq.n	8003a7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e044      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d018      	beq.n	8003a2a <RCCEx_PLLSAI1_Config+0x86>
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCCEx_PLLSAI1_Config+0xa4>
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0x62>
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d009      	beq.n	8003a18 <RCCEx_PLLSAI1_Config+0x74>
 8003a04:	e020      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a06:	4b60      	ldr	r3, [pc, #384]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11d      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a16:	e01a      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a18:	4b5b      	ldr	r3, [pc, #364]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e013      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2a:	4b57      	ldr	r3, [pc, #348]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a46:	e006      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e004      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e002      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	430b      	orrs	r3, r1
 8003a74:	4944      	ldr	r1, [pc, #272]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d17d      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a80:	4b41      	ldr	r3, [pc, #260]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a40      	ldr	r2, [pc, #256]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fe8e 	bl	80017ac <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a92:	e009      	b.n	8003aa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a94:	f7fd fe8a 	bl	80017ac <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d902      	bls.n	8003aa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa6:	e005      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa8:	4b37      	ldr	r3, [pc, #220]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d160      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac0:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	0912      	lsrs	r2, r2, #4
 8003ad8:	0452      	lsls	r2, r2, #17
 8003ada:	430a      	orrs	r2, r1
 8003adc:	492a      	ldr	r1, [pc, #168]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
 8003ae2:	e027      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d112      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aea:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003af2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	0211      	lsls	r1, r2, #8
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6912      	ldr	r2, [r2, #16]
 8003b00:	0852      	lsrs	r2, r2, #1
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0552      	lsls	r2, r2, #21
 8003b06:	430a      	orrs	r2, r1
 8003b08:	491f      	ldr	r1, [pc, #124]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e011      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6892      	ldr	r2, [r2, #8]
 8003b20:	0211      	lsls	r1, r2, #8
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6952      	ldr	r2, [r2, #20]
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0652      	lsls	r2, r2, #25
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4916      	ldr	r1, [pc, #88]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fe34 	bl	80017ac <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b46:	e009      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b48:	f7fd fe30 	bl	80017ac <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d902      	bls.n	8003b5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	73fb      	strb	r3, [r7, #15]
          break;
 8003b5a:	e005      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	4904      	ldr	r1, [pc, #16]	@ (8003b88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000

08003b8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d018      	beq.n	8003bd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ba6:	4b67      	ldr	r3, [pc, #412]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0203 	and.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d10d      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bbe:	4b61      	ldr	r3, [pc, #388]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d047      	beq.n	8003c62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	e044      	b.n	8003c62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d018      	beq.n	8003c12 <RCCEx_PLLSAI2_Config+0x86>
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d825      	bhi.n	8003c30 <RCCEx_PLLSAI2_Config+0xa4>
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d002      	beq.n	8003bee <RCCEx_PLLSAI2_Config+0x62>
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d009      	beq.n	8003c00 <RCCEx_PLLSAI2_Config+0x74>
 8003bec:	e020      	b.n	8003c30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bee:	4b55      	ldr	r3, [pc, #340]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfe:	e01a      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c00:	4b50      	ldr	r3, [pc, #320]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d116      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e013      	b.n	8003c3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c12:	4b4c      	ldr	r3, [pc, #304]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c1e:	4b49      	ldr	r3, [pc, #292]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c2e:	e006      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      break;
 8003c34:	e004      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c46:	4b3f      	ldr	r3, [pc, #252]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	4939      	ldr	r1, [pc, #228]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d167      	bne.n	8003d38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a35      	ldr	r2, [pc, #212]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fd fd9a 	bl	80017ac <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7a:	e009      	b.n	8003c90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c7c:	f7fd fd96 	bl	80017ac <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d902      	bls.n	8003c90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8e:	e005      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c90:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ef      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d14a      	bne.n	8003d38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d111      	bne.n	8003ccc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca8:	4b26      	ldr	r3, [pc, #152]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6892      	ldr	r2, [r2, #8]
 8003cb8:	0211      	lsls	r1, r2, #8
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	0912      	lsrs	r2, r2, #4
 8003cc0:	0452      	lsls	r2, r2, #17
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	491f      	ldr	r1, [pc, #124]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	614b      	str	r3, [r1, #20]
 8003cca:	e011      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	0211      	lsls	r1, r2, #8
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6912      	ldr	r2, [r2, #16]
 8003ce2:	0852      	lsrs	r2, r2, #1
 8003ce4:	3a01      	subs	r2, #1
 8003ce6:	0652      	lsls	r2, r2, #25
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	4916      	ldr	r1, [pc, #88]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cf0:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a13      	ldr	r2, [pc, #76]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fd56 	bl	80017ac <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d02:	e009      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d04:	f7fd fd52 	bl	80017ac <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	73fb      	strb	r3, [r7, #15]
          break;
 8003d16:	e005      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d18:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e095      	b.n	8003e86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d108      	bne.n	8003d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d6a:	d009      	beq.n	8003d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
 8003d72:	e005      	b.n	8003d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f9c8 	bl	8001130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dc0:	d902      	bls.n	8003dc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e002      	b.n	8003dce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003dd6:	d007      	beq.n	8003de8 <HAL_SPI_Init+0xa0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	ea42 0103 	orr.w	r1, r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 0204 	and.w	r2, r3, #4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e64:	ea42 0103 	orr.w	r1, r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e9e:	f7fd fc85 	bl	80017ac <HAL_GetTick>
 8003ea2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d001      	beq.n	8003eb8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e15c      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_SPI_Transmit+0x36>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e154      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_SPI_Transmit+0x48>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e14d      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	88fa      	ldrh	r2, [r7, #6]
 8003ef6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f28:	d10f      	bne.n	8003f4a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d007      	beq.n	8003f68 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f70:	d952      	bls.n	8004018 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_Transmit+0xf2>
 8003f7a:	8b7b      	ldrh	r3, [r7, #26]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d145      	bne.n	800400c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	881a      	ldrh	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fa4:	e032      	b.n	800400c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d112      	bne.n	8003fda <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	881a      	ldrh	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fd8:	e018      	b.n	800400c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fda:	f7fd fbe7 	bl	80017ac <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d803      	bhi.n	8003ff2 <HAL_SPI_Transmit+0x164>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d102      	bne.n	8003ff8 <HAL_SPI_Transmit+0x16a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0b2      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1c7      	bne.n	8003fa6 <HAL_SPI_Transmit+0x118>
 8004016:	e083      	b.n	8004120 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_Transmit+0x198>
 8004020:	8b7b      	ldrh	r3, [r7, #26]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d177      	bne.n	8004116 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d912      	bls.n	8004056 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	881a      	ldrh	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b02      	subs	r3, #2
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004054:	e05f      	b.n	8004116 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	7812      	ldrb	r2, [r2, #0]
 8004062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800407c:	e04b      	b.n	8004116 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d12b      	bne.n	80040e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d912      	bls.n	80040bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	881a      	ldrh	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b02      	subs	r3, #2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040ba:	e02c      	b.n	8004116 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040e2:	e018      	b.n	8004116 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e4:	f7fd fb62 	bl	80017ac <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d803      	bhi.n	80040fc <HAL_SPI_Transmit+0x26e>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d102      	bne.n	8004102 <HAL_SPI_Transmit+0x274>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e02d      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ae      	bne.n	800407e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fa5b 	bl	80045e0 <SPI_EndRxTxTransaction>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004170:	2300      	movs	r3, #0
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
    return;
 80041ba:	e0ce      	b.n	800435a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_SPI_IRQHandler+0x5e>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
    return;
 80041d8:	e0bf      	b.n	800435a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <HAL_SPI_IRQHandler+0x7e>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80b0 	beq.w	800435a <HAL_SPI_IRQHandler+0x1de>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80aa 	beq.w	800435a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d011      	beq.n	8004240 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	e00b      	b.n	8004258 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
        return;
 8004256:	e080      	b.n	800435a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d04f      	beq.n	8004358 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_SPI_IRQHandler+0x168>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d034      	beq.n	800434e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0203 	bic.w	r2, r2, #3
 80042f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d011      	beq.n	8004320 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	4a17      	ldr	r2, [pc, #92]	@ (8004360 <HAL_SPI_IRQHandler+0x1e4>)
 8004302:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd fb61 	bl	80019d0 <HAL_DMA_Abort_IT>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004318:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	4a0c      	ldr	r2, [pc, #48]	@ (8004360 <HAL_SPI_IRQHandler+0x1e4>)
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd fb4b 	bl	80019d0 <HAL_DMA_Abort_IT>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800434c:	e003      	b.n	8004356 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f808 	bl	8004364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004354:	e000      	b.n	8004358 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004356:	bf00      	nop
    return;
 8004358:	bf00      	nop
  }
}
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08004379 	.word	0x08004379

08004364 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ffe5 	bl	8004364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043b4:	f7fd f9fa 	bl	80017ac <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043c4:	f7fd f9f2 	bl	80017ac <HAL_GetTick>
 80043c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ca:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	015b      	lsls	r3, r3, #5
 80043d0:	0d1b      	lsrs	r3, r3, #20
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043da:	e054      	b.n	8004486 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d050      	beq.n	8004486 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043e4:	f7fd f9e2 	bl	80017ac <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d902      	bls.n	80043fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d13d      	bne.n	8004476 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004412:	d111      	bne.n	8004438 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441c:	d004      	beq.n	8004428 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004426:	d107      	bne.n	8004438 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004440:	d10f      	bne.n	8004462 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e017      	b.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	3b01      	subs	r3, #1
 8004484:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d19b      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000004 	.word	0x20000004

080044b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044c6:	f7fd f971 	bl	80017ac <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044d6:	f7fd f969 	bl	80017ac <HAL_GetTick>
 80044da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044e4:	4b3d      	ldr	r3, [pc, #244]	@ (80045dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00da      	lsls	r2, r3, #3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	0d1b      	lsrs	r3, r3, #20
 80044f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044fc:	e060      	b.n	80045c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004504:	d107      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004514:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d050      	beq.n	80045c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800451e:	f7fd f945 	bl	80017ac <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452a:	429a      	cmp	r2, r3
 800452c:	d902      	bls.n	8004534 <SPI_WaitFifoStateUntilTimeout+0x80>
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d13d      	bne.n	80045b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004542:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800454c:	d111      	bne.n	8004572 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004556:	d004      	beq.n	8004562 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004560:	d107      	bne.n	8004572 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004570:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d10f      	bne.n	800459c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800459a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e010      	b.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3b01      	subs	r3, #1
 80045be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d196      	bne.n	80044fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000004 	.word	0x20000004

080045e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ff5b 	bl	80044b4 <SPI_WaitFifoStateUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e027      	b.n	8004664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2200      	movs	r2, #0
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fec0 	bl	80043a4 <SPI_WaitFlagStateUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e014      	b.n	8004664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff ff34 	bl	80044b4 <SPI_WaitFifoStateUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e000      	b.n	8004664 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e049      	b.n	8004712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fde8 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 f9d6 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e04f      	b.n	80047d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01d      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d018      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_TIM_Base_Start_IT+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0x76>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d115      	bne.n	80047be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800479a:	4013      	ands	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d015      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047aa:	d011      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	e008      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40013400 	.word	0x40013400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	00010007 	.word	0x00010007

080047fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d020      	beq.n	8004860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01b      	beq.n	8004860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0202 	mvn.w	r2, #2
 8004830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8e9 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8db 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8ec 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d020      	beq.n	80048ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0204 	mvn.w	r2, #4
 800487c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8c3 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8b5 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8c6 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0208 	mvn.w	r2, #8
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f89d 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f88f 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8a0 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0210 	mvn.w	r2, #16
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2208      	movs	r2, #8
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f877 	bl	8004a1e <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f869 	bl	8004a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f87a 	bl	8004a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0201 	mvn.w	r2, #1
 8004960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc fb44 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00c      	beq.n	8004996 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800498e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f913 	bl	8004bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f90b 	bl	8004bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f834 	bl	8004a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0220 	mvn.w	r2, #32
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8d3 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a46      	ldr	r2, [pc, #280]	@ (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7a:	d00f      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a43      	ldr	r2, [pc, #268]	@ (8004b8c <TIM_Base_SetConfig+0x130>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00b      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a42      	ldr	r2, [pc, #264]	@ (8004b90 <TIM_Base_SetConfig+0x134>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a41      	ldr	r2, [pc, #260]	@ (8004b94 <TIM_Base_SetConfig+0x138>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a40      	ldr	r2, [pc, #256]	@ (8004b98 <TIM_Base_SetConfig+0x13c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d108      	bne.n	8004aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a35      	ldr	r2, [pc, #212]	@ (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01f      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a32      	ldr	r2, [pc, #200]	@ (8004b8c <TIM_Base_SetConfig+0x130>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a31      	ldr	r2, [pc, #196]	@ (8004b90 <TIM_Base_SetConfig+0x134>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a30      	ldr	r2, [pc, #192]	@ (8004b94 <TIM_Base_SetConfig+0x138>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <TIM_Base_SetConfig+0x13c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b9c <TIM_Base_SetConfig+0x140>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba0 <TIM_Base_SetConfig+0x144>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <TIM_Base_SetConfig+0x148>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	@ (8004b88 <TIM_Base_SetConfig+0x12c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00f      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <TIM_Base_SetConfig+0x13c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	@ (8004b9c <TIM_Base_SetConfig+0x140>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a16      	ldr	r2, [pc, #88]	@ (8004ba0 <TIM_Base_SetConfig+0x144>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0xf8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ba4 <TIM_Base_SetConfig+0x148>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d103      	bne.n	8004b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e040      	b.n	8004c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fb54 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	@ 0x24
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fc32 	bl	8005494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f977 	bl	8004f24 <UART_SetConfig>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e01b      	b.n	8004c78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fcb1 	bl	80055d8 <UART_CheckIdleState>
 8004c76:	4603      	mov	r3, r0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d177      	bne.n	8004d88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Transmit+0x24>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e070      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2221      	movs	r2, #33	@ 0x21
 8004cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fd79 	bl	80017ac <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd4:	d108      	bne.n	8004ce8 <HAL_UART_Transmit+0x68>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e003      	b.n	8004cf0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cf0:	e02f      	b.n	8004d52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	@ 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fd13 	bl	8005728 <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e03b      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	881a      	ldrh	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d24:	b292      	uxth	r2, r2
 8004d26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e007      	b.n	8004d40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1c9      	bne.n	8004cf2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2140      	movs	r1, #64	@ 0x40
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fcdd 	bl	8005728 <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e005      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08a      	sub	sp, #40	@ 0x28
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	f040 80b6 	bne.w	8004f1a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_UART_Receive+0x28>
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0ae      	b.n	8004f1c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2222      	movs	r2, #34	@ 0x22
 8004dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fcea 	bl	80017ac <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df2:	d10e      	bne.n	8004e12 <HAL_UART_Receive+0x80>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <HAL_UART_Receive+0x76>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e06:	e02d      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	22ff      	movs	r2, #255	@ 0xff
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e10:	e028      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_UART_Receive+0xa4>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <HAL_UART_Receive+0x9a>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	@ 0xff
 8004e26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e2a:	e01b      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	227f      	movs	r2, #127	@ 0x7f
 8004e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e34:	e016      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e3e:	d10d      	bne.n	8004e5c <HAL_UART_Receive+0xca>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_UART_Receive+0xc0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	227f      	movs	r2, #127	@ 0x7f
 8004e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e50:	e008      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	223f      	movs	r2, #63	@ 0x3f
 8004e56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e5a:	e003      	b.n	8004e64 <HAL_UART_Receive+0xd2>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e74:	d108      	bne.n	8004e88 <HAL_UART_Receive+0xf6>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e003      	b.n	8004e90 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e90:	e037      	b.n	8004f02 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fc43 	bl	8005728 <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e033      	b.n	8004f1c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	3302      	adds	r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e00d      	b.n	8004ef0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8a7b      	ldrh	r3, [r7, #18]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1c1      	bne.n	8004e92 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f28:	b08a      	sub	sp, #40	@ 0x28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4ba4      	ldr	r3, [pc, #656]	@ (80051e4 <UART_SetConfig+0x2c0>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a99      	ldr	r2, [pc, #612]	@ (80051e8 <UART_SetConfig+0x2c4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a90      	ldr	r2, [pc, #576]	@ (80051ec <UART_SetConfig+0x2c8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d126      	bne.n	8004ffc <UART_SetConfig+0xd8>
 8004fae:	4b90      	ldr	r3, [pc, #576]	@ (80051f0 <UART_SetConfig+0x2cc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d81b      	bhi.n	8004ff4 <UART_SetConfig+0xd0>
 8004fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <UART_SetConfig+0xa0>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fed 	.word	0x08004fed
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e116      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e112      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e10e      	b.n	800520a <UART_SetConfig+0x2e6>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff2:	e10a      	b.n	800520a <UART_SetConfig+0x2e6>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffa:	e106      	b.n	800520a <UART_SetConfig+0x2e6>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a7c      	ldr	r2, [pc, #496]	@ (80051f4 <UART_SetConfig+0x2d0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d138      	bne.n	8005078 <UART_SetConfig+0x154>
 8005006:	4b7a      	ldr	r3, [pc, #488]	@ (80051f0 <UART_SetConfig+0x2cc>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d82d      	bhi.n	8005070 <UART_SetConfig+0x14c>
 8005014:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0xf8>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005051 	.word	0x08005051
 8005020:	08005071 	.word	0x08005071
 8005024:	08005071 	.word	0x08005071
 8005028:	08005071 	.word	0x08005071
 800502c:	08005061 	.word	0x08005061
 8005030:	08005071 	.word	0x08005071
 8005034:	08005071 	.word	0x08005071
 8005038:	08005071 	.word	0x08005071
 800503c:	08005059 	.word	0x08005059
 8005040:	08005071 	.word	0x08005071
 8005044:	08005071 	.word	0x08005071
 8005048:	08005071 	.word	0x08005071
 800504c:	08005069 	.word	0x08005069
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e0d8      	b.n	800520a <UART_SetConfig+0x2e6>
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e0d4      	b.n	800520a <UART_SetConfig+0x2e6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e0d0      	b.n	800520a <UART_SetConfig+0x2e6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e0cc      	b.n	800520a <UART_SetConfig+0x2e6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e0c8      	b.n	800520a <UART_SetConfig+0x2e6>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5e      	ldr	r2, [pc, #376]	@ (80051f8 <UART_SetConfig+0x2d4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d125      	bne.n	80050ce <UART_SetConfig+0x1aa>
 8005082:	4b5b      	ldr	r3, [pc, #364]	@ (80051f0 <UART_SetConfig+0x2cc>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005088:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800508c:	2b30      	cmp	r3, #48	@ 0x30
 800508e:	d016      	beq.n	80050be <UART_SetConfig+0x19a>
 8005090:	2b30      	cmp	r3, #48	@ 0x30
 8005092:	d818      	bhi.n	80050c6 <UART_SetConfig+0x1a2>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d00a      	beq.n	80050ae <UART_SetConfig+0x18a>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d814      	bhi.n	80050c6 <UART_SetConfig+0x1a2>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <UART_SetConfig+0x182>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d008      	beq.n	80050b6 <UART_SetConfig+0x192>
 80050a4:	e00f      	b.n	80050c6 <UART_SetConfig+0x1a2>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ac:	e0ad      	b.n	800520a <UART_SetConfig+0x2e6>
 80050ae:	2302      	movs	r3, #2
 80050b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b4:	e0a9      	b.n	800520a <UART_SetConfig+0x2e6>
 80050b6:	2304      	movs	r3, #4
 80050b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050bc:	e0a5      	b.n	800520a <UART_SetConfig+0x2e6>
 80050be:	2308      	movs	r3, #8
 80050c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c4:	e0a1      	b.n	800520a <UART_SetConfig+0x2e6>
 80050c6:	2310      	movs	r3, #16
 80050c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050cc:	e09d      	b.n	800520a <UART_SetConfig+0x2e6>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4a      	ldr	r2, [pc, #296]	@ (80051fc <UART_SetConfig+0x2d8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d125      	bne.n	8005124 <UART_SetConfig+0x200>
 80050d8:	4b45      	ldr	r3, [pc, #276]	@ (80051f0 <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050e4:	d016      	beq.n	8005114 <UART_SetConfig+0x1f0>
 80050e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050e8:	d818      	bhi.n	800511c <UART_SetConfig+0x1f8>
 80050ea:	2b80      	cmp	r3, #128	@ 0x80
 80050ec:	d00a      	beq.n	8005104 <UART_SetConfig+0x1e0>
 80050ee:	2b80      	cmp	r3, #128	@ 0x80
 80050f0:	d814      	bhi.n	800511c <UART_SetConfig+0x1f8>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <UART_SetConfig+0x1d8>
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d008      	beq.n	800510c <UART_SetConfig+0x1e8>
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x1f8>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005102:	e082      	b.n	800520a <UART_SetConfig+0x2e6>
 8005104:	2302      	movs	r3, #2
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510a:	e07e      	b.n	800520a <UART_SetConfig+0x2e6>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e07a      	b.n	800520a <UART_SetConfig+0x2e6>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e076      	b.n	800520a <UART_SetConfig+0x2e6>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e072      	b.n	800520a <UART_SetConfig+0x2e6>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a35      	ldr	r2, [pc, #212]	@ (8005200 <UART_SetConfig+0x2dc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d12a      	bne.n	8005184 <UART_SetConfig+0x260>
 800512e:	4b30      	ldr	r3, [pc, #192]	@ (80051f0 <UART_SetConfig+0x2cc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800513c:	d01a      	beq.n	8005174 <UART_SetConfig+0x250>
 800513e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005142:	d81b      	bhi.n	800517c <UART_SetConfig+0x258>
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d00c      	beq.n	8005164 <UART_SetConfig+0x240>
 800514a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514e:	d815      	bhi.n	800517c <UART_SetConfig+0x258>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <UART_SetConfig+0x238>
 8005154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005158:	d008      	beq.n	800516c <UART_SetConfig+0x248>
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x258>
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005162:	e052      	b.n	800520a <UART_SetConfig+0x2e6>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516a:	e04e      	b.n	800520a <UART_SetConfig+0x2e6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e04a      	b.n	800520a <UART_SetConfig+0x2e6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e046      	b.n	800520a <UART_SetConfig+0x2e6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005182:	e042      	b.n	800520a <UART_SetConfig+0x2e6>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <UART_SetConfig+0x2c4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d13a      	bne.n	8005204 <UART_SetConfig+0x2e0>
 800518e:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <UART_SetConfig+0x2cc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800519c:	d01a      	beq.n	80051d4 <UART_SetConfig+0x2b0>
 800519e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051a2:	d81b      	bhi.n	80051dc <UART_SetConfig+0x2b8>
 80051a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051a8:	d00c      	beq.n	80051c4 <UART_SetConfig+0x2a0>
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ae:	d815      	bhi.n	80051dc <UART_SetConfig+0x2b8>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <UART_SetConfig+0x298>
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b8:	d008      	beq.n	80051cc <UART_SetConfig+0x2a8>
 80051ba:	e00f      	b.n	80051dc <UART_SetConfig+0x2b8>
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c2:	e022      	b.n	800520a <UART_SetConfig+0x2e6>
 80051c4:	2302      	movs	r3, #2
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ca:	e01e      	b.n	800520a <UART_SetConfig+0x2e6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d2:	e01a      	b.n	800520a <UART_SetConfig+0x2e6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051da:	e016      	b.n	800520a <UART_SetConfig+0x2e6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e2:	e012      	b.n	800520a <UART_SetConfig+0x2e6>
 80051e4:	efff69f3 	.word	0xefff69f3
 80051e8:	40008000 	.word	0x40008000
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40004800 	.word	0x40004800
 80051fc:	40004c00 	.word	0x40004c00
 8005200:	40005000 	.word	0x40005000
 8005204:	2310      	movs	r3, #16
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a9f      	ldr	r2, [pc, #636]	@ (800548c <UART_SetConfig+0x568>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d17a      	bne.n	800530a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005218:	2b08      	cmp	r3, #8
 800521a:	d824      	bhi.n	8005266 <UART_SetConfig+0x342>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0x300>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005249 	.word	0x08005249
 8005228:	08005267 	.word	0x08005267
 800522c:	08005251 	.word	0x08005251
 8005230:	08005267 	.word	0x08005267
 8005234:	08005257 	.word	0x08005257
 8005238:	08005267 	.word	0x08005267
 800523c:	08005267 	.word	0x08005267
 8005240:	08005267 	.word	0x08005267
 8005244:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7fe f804 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800524c:	61f8      	str	r0, [r7, #28]
        break;
 800524e:	e010      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b8f      	ldr	r3, [pc, #572]	@ (8005490 <UART_SetConfig+0x56c>)
 8005252:	61fb      	str	r3, [r7, #28]
        break;
 8005254:	e00d      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fd ff65 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800525a:	61f8      	str	r0, [r7, #28]
        break;
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005262:	61fb      	str	r3, [r7, #28]
        break;
 8005264:	e005      	b.n	8005272 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80fb 	beq.w	8005470 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	429a      	cmp	r2, r3
 8005288:	d305      	bcc.n	8005296 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	d903      	bls.n	800529e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800529c:	e0e8      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2200      	movs	r2, #0
 80052a2:	461c      	mov	r4, r3
 80052a4:	4615      	mov	r5, r2
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	022b      	lsls	r3, r5, #8
 80052b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80052b4:	0222      	lsls	r2, r4, #8
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6849      	ldr	r1, [r1, #4]
 80052ba:	0849      	lsrs	r1, r1, #1
 80052bc:	2000      	movs	r0, #0
 80052be:	4688      	mov	r8, r1
 80052c0:	4681      	mov	r9, r0
 80052c2:	eb12 0a08 	adds.w	sl, r2, r8
 80052c6:	eb43 0b09 	adc.w	fp, r3, r9
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	4650      	mov	r0, sl
 80052da:	4659      	mov	r1, fp
 80052dc:	f7fa ffc8 	bl	8000270 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4613      	mov	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ee:	d308      	bcc.n	8005302 <UART_SetConfig+0x3de>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f6:	d204      	bcs.n	8005302 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e0b6      	b.n	8005470 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005308:	e0b2      	b.n	8005470 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005312:	d15e      	bne.n	80053d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005318:	2b08      	cmp	r3, #8
 800531a:	d828      	bhi.n	800536e <UART_SetConfig+0x44a>
 800531c:	a201      	add	r2, pc, #4	@ (adr r2, 8005324 <UART_SetConfig+0x400>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800535f 	.word	0x0800535f
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fd ff84 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800534c:	61f8      	str	r0, [r7, #28]
        break;
 800534e:	e014      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fd ff96 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8005354:	61f8      	str	r0, [r7, #28]
        break;
 8005356:	e010      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b4d      	ldr	r3, [pc, #308]	@ (8005490 <UART_SetConfig+0x56c>)
 800535a:	61fb      	str	r3, [r7, #28]
        break;
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fd fee1 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8005362:	61f8      	str	r0, [r7, #28]
        break;
 8005364:	e009      	b.n	800537a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e005      	b.n	800537a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d077      	beq.n	8005470 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	005a      	lsls	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d916      	bls.n	80053ca <UART_SetConfig+0x4a6>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a2:	d212      	bcs.n	80053ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	4313      	orrs	r3, r2
 80053be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	8afa      	ldrh	r2, [r7, #22]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e052      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053d0:	e04e      	b.n	8005470 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d827      	bhi.n	800542a <UART_SetConfig+0x506>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x4bc>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	0800542b 	.word	0x0800542b
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	08005423 	.word	0x08005423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fd ff26 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8005408:	61f8      	str	r0, [r7, #28]
        break;
 800540a:	e014      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7fd ff38 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8005410:	61f8      	str	r0, [r7, #28]
        break;
 8005412:	e010      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005414:	4b1e      	ldr	r3, [pc, #120]	@ (8005490 <UART_SetConfig+0x56c>)
 8005416:	61fb      	str	r3, [r7, #28]
        break;
 8005418:	e00d      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541a:	f7fd fe83 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800541e:	61f8      	str	r0, [r7, #28]
        break;
 8005420:	e009      	b.n	8005436 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e005      	b.n	8005436 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005434:	bf00      	nop
    }

    if (pclk != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d019      	beq.n	8005470 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	085a      	lsrs	r2, r3, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d909      	bls.n	800546a <UART_SetConfig+0x546>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d205      	bcs.n	800546a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	e002      	b.n	8005470 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800547c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005480:	4618      	mov	r0, r3
 8005482:	3728      	adds	r7, #40	@ 0x28
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	40008000 	.word	0x40008000
 8005490:	00f42400 	.word	0x00f42400

08005494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005592:	d10a      	bne.n	80055aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b098      	sub	sp, #96	@ 0x60
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e8:	f7fc f8e0 	bl	80017ac <HAL_GetTick>
 80055ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d12e      	bne.n	800565a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f88c 	bl	8005728 <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d021      	beq.n	800565a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562a:	653b      	str	r3, [r7, #80]	@ 0x50
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005634:	647b      	str	r3, [r7, #68]	@ 0x44
 8005636:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800563a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e6      	bne.n	8005616 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e062      	b.n	8005720 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d149      	bne.n	80056fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f856 	bl	8005728 <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d03c      	beq.n	80056fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	623b      	str	r3, [r7, #32]
   return(result);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e6      	bne.n	8005682 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	617b      	str	r3, [r7, #20]
   return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e011      	b.n	8005720 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3758      	adds	r7, #88	@ 0x58
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005738:	e04f      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d04b      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fc f833 	bl	80017ac <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <UART_WaitOnFlagUntilTimeout+0x30>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e04e      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d037      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b80      	cmp	r3, #128	@ 0x80
 800576e:	d034      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d031      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b08      	cmp	r3, #8
 8005782:	d110      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2208      	movs	r2, #8
 800578a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f838 	bl	8005802 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2208      	movs	r2, #8
 8005796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e029      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b4:	d111      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f81e 	bl	8005802 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e00f      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d0a0      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b095      	sub	sp, #84	@ 0x54
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800581e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005828:	643b      	str	r3, [r7, #64]	@ 0x40
 800582a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800582e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005830:	e841 2300 	strex	r3, r2, [r1]
 8005834:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e6      	bne.n	800580a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	61fb      	str	r3, [r7, #28]
   return(result);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800585c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	2b01      	cmp	r3, #1
 8005876:	d118      	bne.n	80058aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60bb      	str	r3, [r7, #8]
   return(result);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 0310 	bic.w	r3, r3, #16
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6979      	ldr	r1, [r7, #20]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058be:	bf00      	nop
 80058c0:	3754      	adds	r7, #84	@ 0x54
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <std>:
 80058cc:	2300      	movs	r3, #0
 80058ce:	b510      	push	{r4, lr}
 80058d0:	4604      	mov	r4, r0
 80058d2:	e9c0 3300 	strd	r3, r3, [r0]
 80058d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058da:	6083      	str	r3, [r0, #8]
 80058dc:	8181      	strh	r1, [r0, #12]
 80058de:	6643      	str	r3, [r0, #100]	@ 0x64
 80058e0:	81c2      	strh	r2, [r0, #14]
 80058e2:	6183      	str	r3, [r0, #24]
 80058e4:	4619      	mov	r1, r3
 80058e6:	2208      	movs	r2, #8
 80058e8:	305c      	adds	r0, #92	@ 0x5c
 80058ea:	f000 f906 	bl	8005afa <memset>
 80058ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <std+0x58>)
 80058f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80058f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <std+0x5c>)
 80058f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <std+0x60>)
 80058f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <std+0x64>)
 80058fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <std+0x68>)
 8005900:	6224      	str	r4, [r4, #32]
 8005902:	429c      	cmp	r4, r3
 8005904:	d006      	beq.n	8005914 <std+0x48>
 8005906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800590a:	4294      	cmp	r4, r2
 800590c:	d002      	beq.n	8005914 <std+0x48>
 800590e:	33d0      	adds	r3, #208	@ 0xd0
 8005910:	429c      	cmp	r4, r3
 8005912:	d105      	bne.n	8005920 <std+0x54>
 8005914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f000 b966 	b.w	8005bec <__retarget_lock_init_recursive>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	bf00      	nop
 8005924:	08005a75 	.word	0x08005a75
 8005928:	08005a97 	.word	0x08005a97
 800592c:	08005acf 	.word	0x08005acf
 8005930:	08005af3 	.word	0x08005af3
 8005934:	20000390 	.word	0x20000390

08005938 <stdio_exit_handler>:
 8005938:	4a02      	ldr	r2, [pc, #8]	@ (8005944 <stdio_exit_handler+0xc>)
 800593a:	4903      	ldr	r1, [pc, #12]	@ (8005948 <stdio_exit_handler+0x10>)
 800593c:	4803      	ldr	r0, [pc, #12]	@ (800594c <stdio_exit_handler+0x14>)
 800593e:	f000 b869 	b.w	8005a14 <_fwalk_sglue>
 8005942:	bf00      	nop
 8005944:	20000010 	.word	0x20000010
 8005948:	0800648d 	.word	0x0800648d
 800594c:	20000020 	.word	0x20000020

08005950 <cleanup_stdio>:
 8005950:	6841      	ldr	r1, [r0, #4]
 8005952:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <cleanup_stdio+0x34>)
 8005954:	4299      	cmp	r1, r3
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
 800595a:	d001      	beq.n	8005960 <cleanup_stdio+0x10>
 800595c:	f000 fd96 	bl	800648c <_fflush_r>
 8005960:	68a1      	ldr	r1, [r4, #8]
 8005962:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <cleanup_stdio+0x38>)
 8005964:	4299      	cmp	r1, r3
 8005966:	d002      	beq.n	800596e <cleanup_stdio+0x1e>
 8005968:	4620      	mov	r0, r4
 800596a:	f000 fd8f 	bl	800648c <_fflush_r>
 800596e:	68e1      	ldr	r1, [r4, #12]
 8005970:	4b06      	ldr	r3, [pc, #24]	@ (800598c <cleanup_stdio+0x3c>)
 8005972:	4299      	cmp	r1, r3
 8005974:	d004      	beq.n	8005980 <cleanup_stdio+0x30>
 8005976:	4620      	mov	r0, r4
 8005978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800597c:	f000 bd86 	b.w	800648c <_fflush_r>
 8005980:	bd10      	pop	{r4, pc}
 8005982:	bf00      	nop
 8005984:	20000390 	.word	0x20000390
 8005988:	200003f8 	.word	0x200003f8
 800598c:	20000460 	.word	0x20000460

08005990 <global_stdio_init.part.0>:
 8005990:	b510      	push	{r4, lr}
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <global_stdio_init.part.0+0x30>)
 8005994:	4c0b      	ldr	r4, [pc, #44]	@ (80059c4 <global_stdio_init.part.0+0x34>)
 8005996:	4a0c      	ldr	r2, [pc, #48]	@ (80059c8 <global_stdio_init.part.0+0x38>)
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	4620      	mov	r0, r4
 800599c:	2200      	movs	r2, #0
 800599e:	2104      	movs	r1, #4
 80059a0:	f7ff ff94 	bl	80058cc <std>
 80059a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059a8:	2201      	movs	r2, #1
 80059aa:	2109      	movs	r1, #9
 80059ac:	f7ff ff8e 	bl	80058cc <std>
 80059b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059b4:	2202      	movs	r2, #2
 80059b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ba:	2112      	movs	r1, #18
 80059bc:	f7ff bf86 	b.w	80058cc <std>
 80059c0:	200004c8 	.word	0x200004c8
 80059c4:	20000390 	.word	0x20000390
 80059c8:	08005939 	.word	0x08005939

080059cc <__sfp_lock_acquire>:
 80059cc:	4801      	ldr	r0, [pc, #4]	@ (80059d4 <__sfp_lock_acquire+0x8>)
 80059ce:	f000 b90e 	b.w	8005bee <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	200004d1 	.word	0x200004d1

080059d8 <__sfp_lock_release>:
 80059d8:	4801      	ldr	r0, [pc, #4]	@ (80059e0 <__sfp_lock_release+0x8>)
 80059da:	f000 b909 	b.w	8005bf0 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	200004d1 	.word	0x200004d1

080059e4 <__sinit>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4604      	mov	r4, r0
 80059e8:	f7ff fff0 	bl	80059cc <__sfp_lock_acquire>
 80059ec:	6a23      	ldr	r3, [r4, #32]
 80059ee:	b11b      	cbz	r3, 80059f8 <__sinit+0x14>
 80059f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f4:	f7ff bff0 	b.w	80059d8 <__sfp_lock_release>
 80059f8:	4b04      	ldr	r3, [pc, #16]	@ (8005a0c <__sinit+0x28>)
 80059fa:	6223      	str	r3, [r4, #32]
 80059fc:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <__sinit+0x2c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f5      	bne.n	80059f0 <__sinit+0xc>
 8005a04:	f7ff ffc4 	bl	8005990 <global_stdio_init.part.0>
 8005a08:	e7f2      	b.n	80059f0 <__sinit+0xc>
 8005a0a:	bf00      	nop
 8005a0c:	08005951 	.word	0x08005951
 8005a10:	200004c8 	.word	0x200004c8

08005a14 <_fwalk_sglue>:
 8005a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	4607      	mov	r7, r0
 8005a1a:	4688      	mov	r8, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	2600      	movs	r6, #0
 8005a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a24:	f1b9 0901 	subs.w	r9, r9, #1
 8005a28:	d505      	bpl.n	8005a36 <_fwalk_sglue+0x22>
 8005a2a:	6824      	ldr	r4, [r4, #0]
 8005a2c:	2c00      	cmp	r4, #0
 8005a2e:	d1f7      	bne.n	8005a20 <_fwalk_sglue+0xc>
 8005a30:	4630      	mov	r0, r6
 8005a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a36:	89ab      	ldrh	r3, [r5, #12]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d907      	bls.n	8005a4c <_fwalk_sglue+0x38>
 8005a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a40:	3301      	adds	r3, #1
 8005a42:	d003      	beq.n	8005a4c <_fwalk_sglue+0x38>
 8005a44:	4629      	mov	r1, r5
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c0      	blx	r8
 8005a4a:	4306      	orrs	r6, r0
 8005a4c:	3568      	adds	r5, #104	@ 0x68
 8005a4e:	e7e9      	b.n	8005a24 <_fwalk_sglue+0x10>

08005a50 <iprintf>:
 8005a50:	b40f      	push	{r0, r1, r2, r3}
 8005a52:	b507      	push	{r0, r1, r2, lr}
 8005a54:	4906      	ldr	r1, [pc, #24]	@ (8005a70 <iprintf+0x20>)
 8005a56:	ab04      	add	r3, sp, #16
 8005a58:	6808      	ldr	r0, [r1, #0]
 8005a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5e:	6881      	ldr	r1, [r0, #8]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	f000 f9e9 	bl	8005e38 <_vfiprintf_r>
 8005a66:	b003      	add	sp, #12
 8005a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a6c:	b004      	add	sp, #16
 8005a6e:	4770      	bx	lr
 8005a70:	2000001c 	.word	0x2000001c

08005a74 <__sread>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	f000 f868 	bl	8005b50 <_read_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	bfab      	itete	ge
 8005a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a86:	89a3      	ldrhlt	r3, [r4, #12]
 8005a88:	181b      	addge	r3, r3, r0
 8005a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a8e:	bfac      	ite	ge
 8005a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a92:	81a3      	strhlt	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__swrite>:
 8005a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	898b      	ldrh	r3, [r1, #12]
 8005a9e:	05db      	lsls	r3, r3, #23
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	d505      	bpl.n	8005ab4 <__swrite+0x1e>
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	2302      	movs	r3, #2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f000 f83c 	bl	8005b2c <_lseek_r>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	f000 b853 	b.w	8005b74 <_write_r>

08005ace <__sseek>:
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad6:	f000 f829 	bl	8005b2c <_lseek_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	bf15      	itete	ne
 8005ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005aea:	81a3      	strheq	r3, [r4, #12]
 8005aec:	bf18      	it	ne
 8005aee:	81a3      	strhne	r3, [r4, #12]
 8005af0:	bd10      	pop	{r4, pc}

08005af2 <__sclose>:
 8005af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af6:	f000 b809 	b.w	8005b0c <_close_r>

08005afa <memset>:
 8005afa:	4402      	add	r2, r0
 8005afc:	4603      	mov	r3, r0
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d100      	bne.n	8005b04 <memset+0xa>
 8005b02:	4770      	bx	lr
 8005b04:	f803 1b01 	strb.w	r1, [r3], #1
 8005b08:	e7f9      	b.n	8005afe <memset+0x4>
	...

08005b0c <_close_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	@ (8005b28 <_close_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f7fb fd6d 	bl	80015f6 <_close>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_close_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_close_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200004cc 	.word	0x200004cc

08005b2c <_lseek_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	@ (8005b4c <_lseek_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb fd82 	bl	8001644 <_lseek>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_lseek_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_lseek_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200004cc 	.word	0x200004cc

08005b50 <_read_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	@ (8005b70 <_read_r+0x20>)
 8005b54:	4604      	mov	r4, r0
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fb fd10 	bl	8001584 <_read>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_read_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_read_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200004cc 	.word	0x200004cc

08005b74 <_write_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	@ (8005b94 <_write_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fb fd1b 	bl	80015be <_write>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_write_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_write_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200004cc 	.word	0x200004cc

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	@ (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000001c 	.word	0x2000001c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f000 fdb8 	bl	800672c <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08006850 	.word	0x08006850
 8005be0:	08006850 	.word	0x08006850
 8005be4:	08006850 	.word	0x08006850
 8005be8:	08006854 	.word	0x08006854

08005bec <__retarget_lock_init_recursive>:
 8005bec:	4770      	bx	lr

08005bee <__retarget_lock_acquire_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <__retarget_lock_release_recursive>:
 8005bf0:	4770      	bx	lr
	...

08005bf4 <_free_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d041      	beq.n	8005c80 <_free_r+0x8c>
 8005bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c00:	1f0c      	subs	r4, r1, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfb8      	it	lt
 8005c06:	18e4      	addlt	r4, r4, r3
 8005c08:	f000 f8e0 	bl	8005dcc <__malloc_lock>
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <_free_r+0x90>)
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	b933      	cbnz	r3, 8005c20 <_free_r+0x2c>
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6014      	str	r4, [r2, #0]
 8005c16:	4628      	mov	r0, r5
 8005c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c1c:	f000 b8dc 	b.w	8005dd8 <__malloc_unlock>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d908      	bls.n	8005c36 <_free_r+0x42>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	1821      	adds	r1, r4, r0
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf01      	itttt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	1809      	addeq	r1, r1, r0
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	e7ed      	b.n	8005c12 <_free_r+0x1e>
 8005c36:	461a      	mov	r2, r3
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b10b      	cbz	r3, 8005c40 <_free_r+0x4c>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d9fa      	bls.n	8005c36 <_free_r+0x42>
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	1850      	adds	r0, r2, r1
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d10b      	bne.n	8005c60 <_free_r+0x6c>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	4401      	add	r1, r0
 8005c4c:	1850      	adds	r0, r2, r1
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	d1e0      	bne.n	8005c16 <_free_r+0x22>
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	4408      	add	r0, r1
 8005c5c:	6010      	str	r0, [r2, #0]
 8005c5e:	e7da      	b.n	8005c16 <_free_r+0x22>
 8005c60:	d902      	bls.n	8005c68 <_free_r+0x74>
 8005c62:	230c      	movs	r3, #12
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	e7d6      	b.n	8005c16 <_free_r+0x22>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	1821      	adds	r1, r4, r0
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf04      	itt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	bf04      	itt	eq
 8005c78:	1809      	addeq	r1, r1, r0
 8005c7a:	6021      	streq	r1, [r4, #0]
 8005c7c:	6054      	str	r4, [r2, #4]
 8005c7e:	e7ca      	b.n	8005c16 <_free_r+0x22>
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
 8005c82:	bf00      	nop
 8005c84:	200004d8 	.word	0x200004d8

08005c88 <sbrk_aligned>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005cc8 <sbrk_aligned+0x40>)
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	6831      	ldr	r1, [r6, #0]
 8005c90:	4605      	mov	r5, r0
 8005c92:	b911      	cbnz	r1, 8005c9a <sbrk_aligned+0x12>
 8005c94:	f000 fcb6 	bl	8006604 <_sbrk_r>
 8005c98:	6030      	str	r0, [r6, #0]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fcb1 	bl	8006604 <_sbrk_r>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d103      	bne.n	8005cae <sbrk_aligned+0x26>
 8005ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8005caa:	4620      	mov	r0, r4
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	1cc4      	adds	r4, r0, #3
 8005cb0:	f024 0403 	bic.w	r4, r4, #3
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d0f8      	beq.n	8005caa <sbrk_aligned+0x22>
 8005cb8:	1a21      	subs	r1, r4, r0
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fca2 	bl	8006604 <_sbrk_r>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1f2      	bne.n	8005caa <sbrk_aligned+0x22>
 8005cc4:	e7ef      	b.n	8005ca6 <sbrk_aligned+0x1e>
 8005cc6:	bf00      	nop
 8005cc8:	200004d4 	.word	0x200004d4

08005ccc <_malloc_r>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	1ccd      	adds	r5, r1, #3
 8005cd2:	f025 0503 	bic.w	r5, r5, #3
 8005cd6:	3508      	adds	r5, #8
 8005cd8:	2d0c      	cmp	r5, #12
 8005cda:	bf38      	it	cc
 8005cdc:	250c      	movcc	r5, #12
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	db01      	blt.n	8005ce8 <_malloc_r+0x1c>
 8005ce4:	42a9      	cmp	r1, r5
 8005ce6:	d904      	bls.n	8005cf2 <_malloc_r+0x26>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	2000      	movs	r0, #0
 8005cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dc8 <_malloc_r+0xfc>
 8005cf6:	f000 f869 	bl	8005dcc <__malloc_lock>
 8005cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfe:	461c      	mov	r4, r3
 8005d00:	bb44      	cbnz	r4, 8005d54 <_malloc_r+0x88>
 8005d02:	4629      	mov	r1, r5
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff ffbf 	bl	8005c88 <sbrk_aligned>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	d158      	bne.n	8005dc2 <_malloc_r+0xf6>
 8005d10:	f8d8 4000 	ldr.w	r4, [r8]
 8005d14:	4627      	mov	r7, r4
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d143      	bne.n	8005da2 <_malloc_r+0xd6>
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d04b      	beq.n	8005db6 <_malloc_r+0xea>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	4639      	mov	r1, r7
 8005d22:	4630      	mov	r0, r6
 8005d24:	eb04 0903 	add.w	r9, r4, r3
 8005d28:	f000 fc6c 	bl	8006604 <_sbrk_r>
 8005d2c:	4581      	cmp	r9, r0
 8005d2e:	d142      	bne.n	8005db6 <_malloc_r+0xea>
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	1a6d      	subs	r5, r5, r1
 8005d34:	4629      	mov	r1, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ffa6 	bl	8005c88 <sbrk_aligned>
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d03a      	beq.n	8005db6 <_malloc_r+0xea>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	442b      	add	r3, r5
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	bb62      	cbnz	r2, 8005da8 <_malloc_r+0xdc>
 8005d4e:	f8c8 7000 	str.w	r7, [r8]
 8005d52:	e00f      	b.n	8005d74 <_malloc_r+0xa8>
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	1b52      	subs	r2, r2, r5
 8005d58:	d420      	bmi.n	8005d9c <_malloc_r+0xd0>
 8005d5a:	2a0b      	cmp	r2, #11
 8005d5c:	d917      	bls.n	8005d8e <_malloc_r+0xc2>
 8005d5e:	1961      	adds	r1, r4, r5
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	6025      	str	r5, [r4, #0]
 8005d64:	bf18      	it	ne
 8005d66:	6059      	strne	r1, [r3, #4]
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	bf08      	it	eq
 8005d6c:	f8c8 1000 	streq.w	r1, [r8]
 8005d70:	5162      	str	r2, [r4, r5]
 8005d72:	604b      	str	r3, [r1, #4]
 8005d74:	4630      	mov	r0, r6
 8005d76:	f000 f82f 	bl	8005dd8 <__malloc_unlock>
 8005d7a:	f104 000b 	add.w	r0, r4, #11
 8005d7e:	1d23      	adds	r3, r4, #4
 8005d80:	f020 0007 	bic.w	r0, r0, #7
 8005d84:	1ac2      	subs	r2, r0, r3
 8005d86:	bf1c      	itt	ne
 8005d88:	1a1b      	subne	r3, r3, r0
 8005d8a:	50a3      	strne	r3, [r4, r2]
 8005d8c:	e7af      	b.n	8005cee <_malloc_r+0x22>
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	bf0c      	ite	eq
 8005d94:	f8c8 2000 	streq.w	r2, [r8]
 8005d98:	605a      	strne	r2, [r3, #4]
 8005d9a:	e7eb      	b.n	8005d74 <_malloc_r+0xa8>
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	6864      	ldr	r4, [r4, #4]
 8005da0:	e7ae      	b.n	8005d00 <_malloc_r+0x34>
 8005da2:	463c      	mov	r4, r7
 8005da4:	687f      	ldr	r7, [r7, #4]
 8005da6:	e7b6      	b.n	8005d16 <_malloc_r+0x4a>
 8005da8:	461a      	mov	r2, r3
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d1fb      	bne.n	8005da8 <_malloc_r+0xdc>
 8005db0:	2300      	movs	r3, #0
 8005db2:	6053      	str	r3, [r2, #4]
 8005db4:	e7de      	b.n	8005d74 <_malloc_r+0xa8>
 8005db6:	230c      	movs	r3, #12
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f000 f80c 	bl	8005dd8 <__malloc_unlock>
 8005dc0:	e794      	b.n	8005cec <_malloc_r+0x20>
 8005dc2:	6005      	str	r5, [r0, #0]
 8005dc4:	e7d6      	b.n	8005d74 <_malloc_r+0xa8>
 8005dc6:	bf00      	nop
 8005dc8:	200004d8 	.word	0x200004d8

08005dcc <__malloc_lock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	@ (8005dd4 <__malloc_lock+0x8>)
 8005dce:	f7ff bf0e 	b.w	8005bee <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	200004d0 	.word	0x200004d0

08005dd8 <__malloc_unlock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__malloc_unlock+0x8>)
 8005dda:	f7ff bf09 	b.w	8005bf0 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	200004d0 	.word	0x200004d0

08005de4 <__sfputc_r>:
 8005de4:	6893      	ldr	r3, [r2, #8]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	b410      	push	{r4}
 8005dec:	6093      	str	r3, [r2, #8]
 8005dee:	da08      	bge.n	8005e02 <__sfputc_r+0x1e>
 8005df0:	6994      	ldr	r4, [r2, #24]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	db01      	blt.n	8005dfa <__sfputc_r+0x16>
 8005df6:	290a      	cmp	r1, #10
 8005df8:	d103      	bne.n	8005e02 <__sfputc_r+0x1e>
 8005dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfe:	f000 bb6d 	b.w	80064dc <__swbuf_r>
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	1c58      	adds	r0, r3, #1
 8005e06:	6010      	str	r0, [r2, #0]
 8005e08:	7019      	strb	r1, [r3, #0]
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <__sfputs_r>:
 8005e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	18d5      	adds	r5, r2, r3
 8005e1c:	42ac      	cmp	r4, r5
 8005e1e:	d101      	bne.n	8005e24 <__sfputs_r+0x12>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e007      	b.n	8005e34 <__sfputs_r+0x22>
 8005e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e28:	463a      	mov	r2, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffda 	bl	8005de4 <__sfputc_r>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d1f3      	bne.n	8005e1c <__sfputs_r+0xa>
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e38 <_vfiprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	b09d      	sub	sp, #116	@ 0x74
 8005e40:	4614      	mov	r4, r2
 8005e42:	4698      	mov	r8, r3
 8005e44:	4606      	mov	r6, r0
 8005e46:	b118      	cbz	r0, 8005e50 <_vfiprintf_r+0x18>
 8005e48:	6a03      	ldr	r3, [r0, #32]
 8005e4a:	b90b      	cbnz	r3, 8005e50 <_vfiprintf_r+0x18>
 8005e4c:	f7ff fdca 	bl	80059e4 <__sinit>
 8005e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x2a>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x2a>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e5e:	f7ff fec6 	bl	8005bee <__retarget_lock_acquire_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	071b      	lsls	r3, r3, #28
 8005e66:	d501      	bpl.n	8005e6c <_vfiprintf_r+0x34>
 8005e68:	692b      	ldr	r3, [r5, #16]
 8005e6a:	b99b      	cbnz	r3, 8005e94 <_vfiprintf_r+0x5c>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 fb72 	bl	8006558 <__swsetup_r>
 8005e74:	b170      	cbz	r0, 8005e94 <_vfiprintf_r+0x5c>
 8005e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e78:	07dc      	lsls	r4, r3, #31
 8005e7a:	d504      	bpl.n	8005e86 <_vfiprintf_r+0x4e>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	b01d      	add	sp, #116	@ 0x74
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	0598      	lsls	r0, r3, #22
 8005e8a:	d4f7      	bmi.n	8005e7c <_vfiprintf_r+0x44>
 8005e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e8e:	f7ff feaf 	bl	8005bf0 <__retarget_lock_release_recursive>
 8005e92:	e7f3      	b.n	8005e7c <_vfiprintf_r+0x44>
 8005e94:	2300      	movs	r3, #0
 8005e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea2:	2330      	movs	r3, #48	@ 0x30
 8005ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006054 <_vfiprintf_r+0x21c>
 8005ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eac:	f04f 0901 	mov.w	r9, #1
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	469a      	mov	sl, r3
 8005eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_vfiprintf_r+0x86>
 8005eba:	2a25      	cmp	r2, #37	@ 0x25
 8005ebc:	d1f9      	bne.n	8005eb2 <_vfiprintf_r+0x7a>
 8005ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec2:	d00b      	beq.n	8005edc <_vfiprintf_r+0xa4>
 8005ec4:	465b      	mov	r3, fp
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7ff ffa1 	bl	8005e12 <__sfputs_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f000 80a7 	beq.w	8006024 <_vfiprintf_r+0x1ec>
 8005ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed8:	445a      	add	r2, fp
 8005eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005edc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 809f 	beq.w	8006024 <_vfiprintf_r+0x1ec>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef0:	f10a 0a01 	add.w	sl, sl, #1
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	9307      	str	r3, [sp, #28]
 8005ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005efe:	4654      	mov	r4, sl
 8005f00:	2205      	movs	r2, #5
 8005f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f06:	4853      	ldr	r0, [pc, #332]	@ (8006054 <_vfiprintf_r+0x21c>)
 8005f08:	f7fa f962 	bl	80001d0 <memchr>
 8005f0c:	9a04      	ldr	r2, [sp, #16]
 8005f0e:	b9d8      	cbnz	r0, 8005f48 <_vfiprintf_r+0x110>
 8005f10:	06d1      	lsls	r1, r2, #27
 8005f12:	bf44      	itt	mi
 8005f14:	2320      	movmi	r3, #32
 8005f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f1a:	0713      	lsls	r3, r2, #28
 8005f1c:	bf44      	itt	mi
 8005f1e:	232b      	movmi	r3, #43	@ 0x2b
 8005f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f24:	f89a 3000 	ldrb.w	r3, [sl]
 8005f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f2a:	d015      	beq.n	8005f58 <_vfiprintf_r+0x120>
 8005f2c:	9a07      	ldr	r2, [sp, #28]
 8005f2e:	4654      	mov	r4, sl
 8005f30:	2000      	movs	r0, #0
 8005f32:	f04f 0c0a 	mov.w	ip, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3c:	3b30      	subs	r3, #48	@ 0x30
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d94b      	bls.n	8005fda <_vfiprintf_r+0x1a2>
 8005f42:	b1b0      	cbz	r0, 8005f72 <_vfiprintf_r+0x13a>
 8005f44:	9207      	str	r2, [sp, #28]
 8005f46:	e014      	b.n	8005f72 <_vfiprintf_r+0x13a>
 8005f48:	eba0 0308 	sub.w	r3, r0, r8
 8005f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	46a2      	mov	sl, r4
 8005f56:	e7d2      	b.n	8005efe <_vfiprintf_r+0xc6>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	1d19      	adds	r1, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	9103      	str	r1, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfbb      	ittet	lt
 8005f64:	425b      	neglt	r3, r3
 8005f66:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6a:	9307      	strge	r3, [sp, #28]
 8005f6c:	9307      	strlt	r3, [sp, #28]
 8005f6e:	bfb8      	it	lt
 8005f70:	9204      	strlt	r2, [sp, #16]
 8005f72:	7823      	ldrb	r3, [r4, #0]
 8005f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f76:	d10a      	bne.n	8005f8e <_vfiprintf_r+0x156>
 8005f78:	7863      	ldrb	r3, [r4, #1]
 8005f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f7c:	d132      	bne.n	8005fe4 <_vfiprintf_r+0x1ac>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9203      	str	r2, [sp, #12]
 8005f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006064 <_vfiprintf_r+0x22c>
 8005f92:	7821      	ldrb	r1, [r4, #0]
 8005f94:	2203      	movs	r2, #3
 8005f96:	4650      	mov	r0, sl
 8005f98:	f7fa f91a 	bl	80001d0 <memchr>
 8005f9c:	b138      	cbz	r0, 8005fae <_vfiprintf_r+0x176>
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	eba0 000a 	sub.w	r0, r0, sl
 8005fa4:	2240      	movs	r2, #64	@ 0x40
 8005fa6:	4082      	lsls	r2, r0
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	3401      	adds	r4, #1
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4829      	ldr	r0, [pc, #164]	@ (8006058 <_vfiprintf_r+0x220>)
 8005fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fb8:	2206      	movs	r2, #6
 8005fba:	f7fa f909 	bl	80001d0 <memchr>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d03f      	beq.n	8006042 <_vfiprintf_r+0x20a>
 8005fc2:	4b26      	ldr	r3, [pc, #152]	@ (800605c <_vfiprintf_r+0x224>)
 8005fc4:	bb1b      	cbnz	r3, 800600e <_vfiprintf_r+0x1d6>
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	3307      	adds	r3, #7
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	3308      	adds	r3, #8
 8005fd0:	9303      	str	r3, [sp, #12]
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	443b      	add	r3, r7
 8005fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd8:	e76a      	b.n	8005eb0 <_vfiprintf_r+0x78>
 8005fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fde:	460c      	mov	r4, r1
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e7a8      	b.n	8005f36 <_vfiprintf_r+0xfe>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	3401      	adds	r4, #1
 8005fe8:	9305      	str	r3, [sp, #20]
 8005fea:	4619      	mov	r1, r3
 8005fec:	f04f 0c0a 	mov.w	ip, #10
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff6:	3a30      	subs	r2, #48	@ 0x30
 8005ff8:	2a09      	cmp	r2, #9
 8005ffa:	d903      	bls.n	8006004 <_vfiprintf_r+0x1cc>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0c6      	beq.n	8005f8e <_vfiprintf_r+0x156>
 8006000:	9105      	str	r1, [sp, #20]
 8006002:	e7c4      	b.n	8005f8e <_vfiprintf_r+0x156>
 8006004:	fb0c 2101 	mla	r1, ip, r1, r2
 8006008:	4604      	mov	r4, r0
 800600a:	2301      	movs	r3, #1
 800600c:	e7f0      	b.n	8005ff0 <_vfiprintf_r+0x1b8>
 800600e:	ab03      	add	r3, sp, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	462a      	mov	r2, r5
 8006014:	4b12      	ldr	r3, [pc, #72]	@ (8006060 <_vfiprintf_r+0x228>)
 8006016:	a904      	add	r1, sp, #16
 8006018:	4630      	mov	r0, r6
 800601a:	f3af 8000 	nop.w
 800601e:	4607      	mov	r7, r0
 8006020:	1c78      	adds	r0, r7, #1
 8006022:	d1d6      	bne.n	8005fd2 <_vfiprintf_r+0x19a>
 8006024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006026:	07d9      	lsls	r1, r3, #31
 8006028:	d405      	bmi.n	8006036 <_vfiprintf_r+0x1fe>
 800602a:	89ab      	ldrh	r3, [r5, #12]
 800602c:	059a      	lsls	r2, r3, #22
 800602e:	d402      	bmi.n	8006036 <_vfiprintf_r+0x1fe>
 8006030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006032:	f7ff fddd 	bl	8005bf0 <__retarget_lock_release_recursive>
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	065b      	lsls	r3, r3, #25
 800603a:	f53f af1f 	bmi.w	8005e7c <_vfiprintf_r+0x44>
 800603e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006040:	e71e      	b.n	8005e80 <_vfiprintf_r+0x48>
 8006042:	ab03      	add	r3, sp, #12
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	462a      	mov	r2, r5
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <_vfiprintf_r+0x228>)
 800604a:	a904      	add	r1, sp, #16
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f879 	bl	8006144 <_printf_i>
 8006052:	e7e4      	b.n	800601e <_vfiprintf_r+0x1e6>
 8006054:	08006814 	.word	0x08006814
 8006058:	0800681e 	.word	0x0800681e
 800605c:	00000000 	.word	0x00000000
 8006060:	08005e13 	.word	0x08005e13
 8006064:	0800681a 	.word	0x0800681a

08006068 <_printf_common>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	4616      	mov	r6, r2
 800606e:	4698      	mov	r8, r3
 8006070:	688a      	ldr	r2, [r1, #8]
 8006072:	690b      	ldr	r3, [r1, #16]
 8006074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006078:	4293      	cmp	r3, r2
 800607a:	bfb8      	it	lt
 800607c:	4613      	movlt	r3, r2
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006084:	4607      	mov	r7, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b10a      	cbz	r2, 800608e <_printf_common+0x26>
 800608a:	3301      	adds	r3, #1
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	0699      	lsls	r1, r3, #26
 8006092:	bf42      	ittt	mi
 8006094:	6833      	ldrmi	r3, [r6, #0]
 8006096:	3302      	addmi	r3, #2
 8006098:	6033      	strmi	r3, [r6, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	f015 0506 	ands.w	r5, r5, #6
 80060a0:	d106      	bne.n	80060b0 <_printf_common+0x48>
 80060a2:	f104 0a19 	add.w	sl, r4, #25
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dc26      	bgt.n	80060fe <_printf_common+0x96>
 80060b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	3b00      	subs	r3, #0
 80060b8:	bf18      	it	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	0692      	lsls	r2, r2, #26
 80060be:	d42b      	bmi.n	8006118 <_printf_common+0xb0>
 80060c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d01e      	beq.n	800610c <_printf_common+0xa4>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf02      	ittt	eq
 80060da:	68e5      	ldreq	r5, [r4, #12]
 80060dc:	6833      	ldreq	r3, [r6, #0]
 80060de:	1aed      	subeq	r5, r5, r3
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	bf0c      	ite	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	2500      	movne	r5, #0
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bfc4      	itt	gt
 80060ee:	1a9b      	subgt	r3, r3, r2
 80060f0:	18ed      	addgt	r5, r5, r3
 80060f2:	2600      	movs	r6, #0
 80060f4:	341a      	adds	r4, #26
 80060f6:	42b5      	cmp	r5, r6
 80060f8:	d11a      	bne.n	8006130 <_printf_common+0xc8>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e008      	b.n	8006110 <_printf_common+0xa8>
 80060fe:	2301      	movs	r3, #1
 8006100:	4652      	mov	r2, sl
 8006102:	4641      	mov	r1, r8
 8006104:	4638      	mov	r0, r7
 8006106:	47c8      	blx	r9
 8006108:	3001      	adds	r0, #1
 800610a:	d103      	bne.n	8006114 <_printf_common+0xac>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006114:	3501      	adds	r5, #1
 8006116:	e7c6      	b.n	80060a6 <_printf_common+0x3e>
 8006118:	18e1      	adds	r1, r4, r3
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	2030      	movs	r0, #48	@ 0x30
 800611e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006122:	4422      	add	r2, r4
 8006124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800612c:	3302      	adds	r3, #2
 800612e:	e7c7      	b.n	80060c0 <_printf_common+0x58>
 8006130:	2301      	movs	r3, #1
 8006132:	4622      	mov	r2, r4
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d0e6      	beq.n	800610c <_printf_common+0xa4>
 800613e:	3601      	adds	r6, #1
 8006140:	e7d9      	b.n	80060f6 <_printf_common+0x8e>
	...

08006144 <_printf_i>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	7e0f      	ldrb	r7, [r1, #24]
 800614a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800614c:	2f78      	cmp	r7, #120	@ 0x78
 800614e:	4691      	mov	r9, r2
 8006150:	4680      	mov	r8, r0
 8006152:	460c      	mov	r4, r1
 8006154:	469a      	mov	sl, r3
 8006156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800615a:	d807      	bhi.n	800616c <_printf_i+0x28>
 800615c:	2f62      	cmp	r7, #98	@ 0x62
 800615e:	d80a      	bhi.n	8006176 <_printf_i+0x32>
 8006160:	2f00      	cmp	r7, #0
 8006162:	f000 80d2 	beq.w	800630a <_printf_i+0x1c6>
 8006166:	2f58      	cmp	r7, #88	@ 0x58
 8006168:	f000 80b9 	beq.w	80062de <_printf_i+0x19a>
 800616c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006174:	e03a      	b.n	80061ec <_printf_i+0xa8>
 8006176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800617a:	2b15      	cmp	r3, #21
 800617c:	d8f6      	bhi.n	800616c <_printf_i+0x28>
 800617e:	a101      	add	r1, pc, #4	@ (adr r1, 8006184 <_printf_i+0x40>)
 8006180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061f1 	.word	0x080061f1
 800618c:	0800616d 	.word	0x0800616d
 8006190:	0800616d 	.word	0x0800616d
 8006194:	0800616d 	.word	0x0800616d
 8006198:	0800616d 	.word	0x0800616d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800616d 	.word	0x0800616d
 80061a4:	0800616d 	.word	0x0800616d
 80061a8:	0800616d 	.word	0x0800616d
 80061ac:	0800616d 	.word	0x0800616d
 80061b0:	080062f1 	.word	0x080062f1
 80061b4:	0800621b 	.word	0x0800621b
 80061b8:	080062ab 	.word	0x080062ab
 80061bc:	0800616d 	.word	0x0800616d
 80061c0:	0800616d 	.word	0x0800616d
 80061c4:	08006313 	.word	0x08006313
 80061c8:	0800616d 	.word	0x0800616d
 80061cc:	0800621b 	.word	0x0800621b
 80061d0:	0800616d 	.word	0x0800616d
 80061d4:	0800616d 	.word	0x0800616d
 80061d8:	080062b3 	.word	0x080062b3
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6032      	str	r2, [r6, #0]
 80061e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061ec:	2301      	movs	r3, #1
 80061ee:	e09d      	b.n	800632c <_printf_i+0x1e8>
 80061f0:	6833      	ldr	r3, [r6, #0]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	6031      	str	r1, [r6, #0]
 80061f8:	0606      	lsls	r6, r0, #24
 80061fa:	d501      	bpl.n	8006200 <_printf_i+0xbc>
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	e003      	b.n	8006208 <_printf_i+0xc4>
 8006200:	0645      	lsls	r5, r0, #25
 8006202:	d5fb      	bpl.n	80061fc <_printf_i+0xb8>
 8006204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006208:	2d00      	cmp	r5, #0
 800620a:	da03      	bge.n	8006214 <_printf_i+0xd0>
 800620c:	232d      	movs	r3, #45	@ 0x2d
 800620e:	426d      	negs	r5, r5
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006214:	4859      	ldr	r0, [pc, #356]	@ (800637c <_printf_i+0x238>)
 8006216:	230a      	movs	r3, #10
 8006218:	e011      	b.n	800623e <_printf_i+0xfa>
 800621a:	6821      	ldr	r1, [r4, #0]
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	0608      	lsls	r0, r1, #24
 8006220:	f853 5b04 	ldr.w	r5, [r3], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0xe8>
 8006226:	0649      	lsls	r1, r1, #25
 8006228:	bf48      	it	mi
 800622a:	b2ad      	uxthmi	r5, r5
 800622c:	2f6f      	cmp	r7, #111	@ 0x6f
 800622e:	4853      	ldr	r0, [pc, #332]	@ (800637c <_printf_i+0x238>)
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	bf14      	ite	ne
 8006234:	230a      	movne	r3, #10
 8006236:	2308      	moveq	r3, #8
 8006238:	2100      	movs	r1, #0
 800623a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800623e:	6866      	ldr	r6, [r4, #4]
 8006240:	60a6      	str	r6, [r4, #8]
 8006242:	2e00      	cmp	r6, #0
 8006244:	bfa2      	ittt	ge
 8006246:	6821      	ldrge	r1, [r4, #0]
 8006248:	f021 0104 	bicge.w	r1, r1, #4
 800624c:	6021      	strge	r1, [r4, #0]
 800624e:	b90d      	cbnz	r5, 8006254 <_printf_i+0x110>
 8006250:	2e00      	cmp	r6, #0
 8006252:	d04b      	beq.n	80062ec <_printf_i+0x1a8>
 8006254:	4616      	mov	r6, r2
 8006256:	fbb5 f1f3 	udiv	r1, r5, r3
 800625a:	fb03 5711 	mls	r7, r3, r1, r5
 800625e:	5dc7      	ldrb	r7, [r0, r7]
 8006260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006264:	462f      	mov	r7, r5
 8006266:	42bb      	cmp	r3, r7
 8006268:	460d      	mov	r5, r1
 800626a:	d9f4      	bls.n	8006256 <_printf_i+0x112>
 800626c:	2b08      	cmp	r3, #8
 800626e:	d10b      	bne.n	8006288 <_printf_i+0x144>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	07df      	lsls	r7, r3, #31
 8006274:	d508      	bpl.n	8006288 <_printf_i+0x144>
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	6861      	ldr	r1, [r4, #4]
 800627a:	4299      	cmp	r1, r3
 800627c:	bfde      	ittt	le
 800627e:	2330      	movle	r3, #48	@ 0x30
 8006280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006284:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006288:	1b92      	subs	r2, r2, r6
 800628a:	6122      	str	r2, [r4, #16]
 800628c:	f8cd a000 	str.w	sl, [sp]
 8006290:	464b      	mov	r3, r9
 8006292:	aa03      	add	r2, sp, #12
 8006294:	4621      	mov	r1, r4
 8006296:	4640      	mov	r0, r8
 8006298:	f7ff fee6 	bl	8006068 <_printf_common>
 800629c:	3001      	adds	r0, #1
 800629e:	d14a      	bne.n	8006336 <_printf_i+0x1f2>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	b004      	add	sp, #16
 80062a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	f043 0320 	orr.w	r3, r3, #32
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	4833      	ldr	r0, [pc, #204]	@ (8006380 <_printf_i+0x23c>)
 80062b4:	2778      	movs	r7, #120	@ 0x78
 80062b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	6831      	ldr	r1, [r6, #0]
 80062be:	061f      	lsls	r7, r3, #24
 80062c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80062c4:	d402      	bmi.n	80062cc <_printf_i+0x188>
 80062c6:	065f      	lsls	r7, r3, #25
 80062c8:	bf48      	it	mi
 80062ca:	b2ad      	uxthmi	r5, r5
 80062cc:	6031      	str	r1, [r6, #0]
 80062ce:	07d9      	lsls	r1, r3, #31
 80062d0:	bf44      	itt	mi
 80062d2:	f043 0320 	orrmi.w	r3, r3, #32
 80062d6:	6023      	strmi	r3, [r4, #0]
 80062d8:	b11d      	cbz	r5, 80062e2 <_printf_i+0x19e>
 80062da:	2310      	movs	r3, #16
 80062dc:	e7ac      	b.n	8006238 <_printf_i+0xf4>
 80062de:	4827      	ldr	r0, [pc, #156]	@ (800637c <_printf_i+0x238>)
 80062e0:	e7e9      	b.n	80062b6 <_printf_i+0x172>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f023 0320 	bic.w	r3, r3, #32
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	e7f6      	b.n	80062da <_printf_i+0x196>
 80062ec:	4616      	mov	r6, r2
 80062ee:	e7bd      	b.n	800626c <_printf_i+0x128>
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	6961      	ldr	r1, [r4, #20]
 80062f6:	1d18      	adds	r0, r3, #4
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	062e      	lsls	r6, r5, #24
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	d501      	bpl.n	8006304 <_printf_i+0x1c0>
 8006300:	6019      	str	r1, [r3, #0]
 8006302:	e002      	b.n	800630a <_printf_i+0x1c6>
 8006304:	0668      	lsls	r0, r5, #25
 8006306:	d5fb      	bpl.n	8006300 <_printf_i+0x1bc>
 8006308:	8019      	strh	r1, [r3, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	4616      	mov	r6, r2
 8006310:	e7bc      	b.n	800628c <_printf_i+0x148>
 8006312:	6833      	ldr	r3, [r6, #0]
 8006314:	1d1a      	adds	r2, r3, #4
 8006316:	6032      	str	r2, [r6, #0]
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	2100      	movs	r1, #0
 800631e:	4630      	mov	r0, r6
 8006320:	f7f9 ff56 	bl	80001d0 <memchr>
 8006324:	b108      	cbz	r0, 800632a <_printf_i+0x1e6>
 8006326:	1b80      	subs	r0, r0, r6
 8006328:	6060      	str	r0, [r4, #4]
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	2300      	movs	r3, #0
 8006330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006334:	e7aa      	b.n	800628c <_printf_i+0x148>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	4632      	mov	r2, r6
 800633a:	4649      	mov	r1, r9
 800633c:	4640      	mov	r0, r8
 800633e:	47d0      	blx	sl
 8006340:	3001      	adds	r0, #1
 8006342:	d0ad      	beq.n	80062a0 <_printf_i+0x15c>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	079b      	lsls	r3, r3, #30
 8006348:	d413      	bmi.n	8006372 <_printf_i+0x22e>
 800634a:	68e0      	ldr	r0, [r4, #12]
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	4298      	cmp	r0, r3
 8006350:	bfb8      	it	lt
 8006352:	4618      	movlt	r0, r3
 8006354:	e7a6      	b.n	80062a4 <_printf_i+0x160>
 8006356:	2301      	movs	r3, #1
 8006358:	4632      	mov	r2, r6
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	47d0      	blx	sl
 8006360:	3001      	adds	r0, #1
 8006362:	d09d      	beq.n	80062a0 <_printf_i+0x15c>
 8006364:	3501      	adds	r5, #1
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	9903      	ldr	r1, [sp, #12]
 800636a:	1a5b      	subs	r3, r3, r1
 800636c:	42ab      	cmp	r3, r5
 800636e:	dcf2      	bgt.n	8006356 <_printf_i+0x212>
 8006370:	e7eb      	b.n	800634a <_printf_i+0x206>
 8006372:	2500      	movs	r5, #0
 8006374:	f104 0619 	add.w	r6, r4, #25
 8006378:	e7f5      	b.n	8006366 <_printf_i+0x222>
 800637a:	bf00      	nop
 800637c:	08006825 	.word	0x08006825
 8006380:	08006836 	.word	0x08006836

08006384 <__sflush_r>:
 8006384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	0716      	lsls	r6, r2, #28
 800638e:	4605      	mov	r5, r0
 8006390:	460c      	mov	r4, r1
 8006392:	d454      	bmi.n	800643e <__sflush_r+0xba>
 8006394:	684b      	ldr	r3, [r1, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	dc02      	bgt.n	80063a0 <__sflush_r+0x1c>
 800639a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd48      	ble.n	8006432 <__sflush_r+0xae>
 80063a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d045      	beq.n	8006432 <__sflush_r+0xae>
 80063a6:	2300      	movs	r3, #0
 80063a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063ac:	682f      	ldr	r7, [r5, #0]
 80063ae:	6a21      	ldr	r1, [r4, #32]
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	d030      	beq.n	8006416 <__sflush_r+0x92>
 80063b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	0759      	lsls	r1, r3, #29
 80063ba:	d505      	bpl.n	80063c8 <__sflush_r+0x44>
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063c2:	b10b      	cbz	r3, 80063c8 <__sflush_r+0x44>
 80063c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b0      	blx	r6
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	d106      	bne.n	80063e6 <__sflush_r+0x62>
 80063d8:	6829      	ldr	r1, [r5, #0]
 80063da:	291d      	cmp	r1, #29
 80063dc:	d82b      	bhi.n	8006436 <__sflush_r+0xb2>
 80063de:	4a2a      	ldr	r2, [pc, #168]	@ (8006488 <__sflush_r+0x104>)
 80063e0:	410a      	asrs	r2, r1
 80063e2:	07d6      	lsls	r6, r2, #31
 80063e4:	d427      	bmi.n	8006436 <__sflush_r+0xb2>
 80063e6:	2200      	movs	r2, #0
 80063e8:	6062      	str	r2, [r4, #4]
 80063ea:	04d9      	lsls	r1, r3, #19
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	d504      	bpl.n	80063fc <__sflush_r+0x78>
 80063f2:	1c42      	adds	r2, r0, #1
 80063f4:	d101      	bne.n	80063fa <__sflush_r+0x76>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	b903      	cbnz	r3, 80063fc <__sflush_r+0x78>
 80063fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80063fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063fe:	602f      	str	r7, [r5, #0]
 8006400:	b1b9      	cbz	r1, 8006432 <__sflush_r+0xae>
 8006402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__sflush_r+0x8c>
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff fbf2 	bl	8005bf4 <_free_r>
 8006410:	2300      	movs	r3, #0
 8006412:	6363      	str	r3, [r4, #52]	@ 0x34
 8006414:	e00d      	b.n	8006432 <__sflush_r+0xae>
 8006416:	2301      	movs	r3, #1
 8006418:	4628      	mov	r0, r5
 800641a:	47b0      	blx	r6
 800641c:	4602      	mov	r2, r0
 800641e:	1c50      	adds	r0, r2, #1
 8006420:	d1c9      	bne.n	80063b6 <__sflush_r+0x32>
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0c6      	beq.n	80063b6 <__sflush_r+0x32>
 8006428:	2b1d      	cmp	r3, #29
 800642a:	d001      	beq.n	8006430 <__sflush_r+0xac>
 800642c:	2b16      	cmp	r3, #22
 800642e:	d11e      	bne.n	800646e <__sflush_r+0xea>
 8006430:	602f      	str	r7, [r5, #0]
 8006432:	2000      	movs	r0, #0
 8006434:	e022      	b.n	800647c <__sflush_r+0xf8>
 8006436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800643a:	b21b      	sxth	r3, r3
 800643c:	e01b      	b.n	8006476 <__sflush_r+0xf2>
 800643e:	690f      	ldr	r7, [r1, #16]
 8006440:	2f00      	cmp	r7, #0
 8006442:	d0f6      	beq.n	8006432 <__sflush_r+0xae>
 8006444:	0793      	lsls	r3, r2, #30
 8006446:	680e      	ldr	r6, [r1, #0]
 8006448:	bf08      	it	eq
 800644a:	694b      	ldreq	r3, [r1, #20]
 800644c:	600f      	str	r7, [r1, #0]
 800644e:	bf18      	it	ne
 8006450:	2300      	movne	r3, #0
 8006452:	eba6 0807 	sub.w	r8, r6, r7
 8006456:	608b      	str	r3, [r1, #8]
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	dde9      	ble.n	8006432 <__sflush_r+0xae>
 800645e:	6a21      	ldr	r1, [r4, #32]
 8006460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006462:	4643      	mov	r3, r8
 8006464:	463a      	mov	r2, r7
 8006466:	4628      	mov	r0, r5
 8006468:	47b0      	blx	r6
 800646a:	2800      	cmp	r0, #0
 800646c:	dc08      	bgt.n	8006480 <__sflush_r+0xfc>
 800646e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006480:	4407      	add	r7, r0
 8006482:	eba8 0800 	sub.w	r8, r8, r0
 8006486:	e7e7      	b.n	8006458 <__sflush_r+0xd4>
 8006488:	dfbffffe 	.word	0xdfbffffe

0800648c <_fflush_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	690b      	ldr	r3, [r1, #16]
 8006490:	4605      	mov	r5, r0
 8006492:	460c      	mov	r4, r1
 8006494:	b913      	cbnz	r3, 800649c <_fflush_r+0x10>
 8006496:	2500      	movs	r5, #0
 8006498:	4628      	mov	r0, r5
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	b118      	cbz	r0, 80064a6 <_fflush_r+0x1a>
 800649e:	6a03      	ldr	r3, [r0, #32]
 80064a0:	b90b      	cbnz	r3, 80064a6 <_fflush_r+0x1a>
 80064a2:	f7ff fa9f 	bl	80059e4 <__sinit>
 80064a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f3      	beq.n	8006496 <_fflush_r+0xa>
 80064ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064b0:	07d0      	lsls	r0, r2, #31
 80064b2:	d404      	bmi.n	80064be <_fflush_r+0x32>
 80064b4:	0599      	lsls	r1, r3, #22
 80064b6:	d402      	bmi.n	80064be <_fflush_r+0x32>
 80064b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ba:	f7ff fb98 	bl	8005bee <__retarget_lock_acquire_recursive>
 80064be:	4628      	mov	r0, r5
 80064c0:	4621      	mov	r1, r4
 80064c2:	f7ff ff5f 	bl	8006384 <__sflush_r>
 80064c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064c8:	07da      	lsls	r2, r3, #31
 80064ca:	4605      	mov	r5, r0
 80064cc:	d4e4      	bmi.n	8006498 <_fflush_r+0xc>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	059b      	lsls	r3, r3, #22
 80064d2:	d4e1      	bmi.n	8006498 <_fflush_r+0xc>
 80064d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064d6:	f7ff fb8b 	bl	8005bf0 <__retarget_lock_release_recursive>
 80064da:	e7dd      	b.n	8006498 <_fflush_r+0xc>

080064dc <__swbuf_r>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	460e      	mov	r6, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	4605      	mov	r5, r0
 80064e4:	b118      	cbz	r0, 80064ee <__swbuf_r+0x12>
 80064e6:	6a03      	ldr	r3, [r0, #32]
 80064e8:	b90b      	cbnz	r3, 80064ee <__swbuf_r+0x12>
 80064ea:	f7ff fa7b 	bl	80059e4 <__sinit>
 80064ee:	69a3      	ldr	r3, [r4, #24]
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	071a      	lsls	r2, r3, #28
 80064f6:	d501      	bpl.n	80064fc <__swbuf_r+0x20>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	b943      	cbnz	r3, 800650e <__swbuf_r+0x32>
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 f82a 	bl	8006558 <__swsetup_r>
 8006504:	b118      	cbz	r0, 800650e <__swbuf_r+0x32>
 8006506:	f04f 37ff 	mov.w	r7, #4294967295
 800650a:	4638      	mov	r0, r7
 800650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	6922      	ldr	r2, [r4, #16]
 8006512:	1a98      	subs	r0, r3, r2
 8006514:	6963      	ldr	r3, [r4, #20]
 8006516:	b2f6      	uxtb	r6, r6
 8006518:	4283      	cmp	r3, r0
 800651a:	4637      	mov	r7, r6
 800651c:	dc05      	bgt.n	800652a <__swbuf_r+0x4e>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f7ff ffb3 	bl	800648c <_fflush_r>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1ed      	bne.n	8006506 <__swbuf_r+0x2a>
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	3b01      	subs	r3, #1
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	701e      	strb	r6, [r3, #0]
 8006538:	6962      	ldr	r2, [r4, #20]
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	429a      	cmp	r2, r3
 800653e:	d004      	beq.n	800654a <__swbuf_r+0x6e>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	07db      	lsls	r3, r3, #31
 8006544:	d5e1      	bpl.n	800650a <__swbuf_r+0x2e>
 8006546:	2e0a      	cmp	r6, #10
 8006548:	d1df      	bne.n	800650a <__swbuf_r+0x2e>
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f7ff ff9d 	bl	800648c <_fflush_r>
 8006552:	2800      	cmp	r0, #0
 8006554:	d0d9      	beq.n	800650a <__swbuf_r+0x2e>
 8006556:	e7d6      	b.n	8006506 <__swbuf_r+0x2a>

08006558 <__swsetup_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4b29      	ldr	r3, [pc, #164]	@ (8006600 <__swsetup_r+0xa8>)
 800655c:	4605      	mov	r5, r0
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	460c      	mov	r4, r1
 8006562:	b118      	cbz	r0, 800656c <__swsetup_r+0x14>
 8006564:	6a03      	ldr	r3, [r0, #32]
 8006566:	b90b      	cbnz	r3, 800656c <__swsetup_r+0x14>
 8006568:	f7ff fa3c 	bl	80059e4 <__sinit>
 800656c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006570:	0719      	lsls	r1, r3, #28
 8006572:	d422      	bmi.n	80065ba <__swsetup_r+0x62>
 8006574:	06da      	lsls	r2, r3, #27
 8006576:	d407      	bmi.n	8006588 <__swsetup_r+0x30>
 8006578:	2209      	movs	r2, #9
 800657a:	602a      	str	r2, [r5, #0]
 800657c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e033      	b.n	80065f0 <__swsetup_r+0x98>
 8006588:	0758      	lsls	r0, r3, #29
 800658a:	d512      	bpl.n	80065b2 <__swsetup_r+0x5a>
 800658c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800658e:	b141      	cbz	r1, 80065a2 <__swsetup_r+0x4a>
 8006590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006594:	4299      	cmp	r1, r3
 8006596:	d002      	beq.n	800659e <__swsetup_r+0x46>
 8006598:	4628      	mov	r0, r5
 800659a:	f7ff fb2b 	bl	8005bf4 <_free_r>
 800659e:	2300      	movs	r3, #0
 80065a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	2300      	movs	r3, #0
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f043 0308 	orr.w	r3, r3, #8
 80065b8:	81a3      	strh	r3, [r4, #12]
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	b94b      	cbnz	r3, 80065d2 <__swsetup_r+0x7a>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c8:	d003      	beq.n	80065d2 <__swsetup_r+0x7a>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 f84f 	bl	8006670 <__smakebuf_r>
 80065d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d6:	f013 0201 	ands.w	r2, r3, #1
 80065da:	d00a      	beq.n	80065f2 <__swsetup_r+0x9a>
 80065dc:	2200      	movs	r2, #0
 80065de:	60a2      	str	r2, [r4, #8]
 80065e0:	6962      	ldr	r2, [r4, #20]
 80065e2:	4252      	negs	r2, r2
 80065e4:	61a2      	str	r2, [r4, #24]
 80065e6:	6922      	ldr	r2, [r4, #16]
 80065e8:	b942      	cbnz	r2, 80065fc <__swsetup_r+0xa4>
 80065ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065ee:	d1c5      	bne.n	800657c <__swsetup_r+0x24>
 80065f0:	bd38      	pop	{r3, r4, r5, pc}
 80065f2:	0799      	lsls	r1, r3, #30
 80065f4:	bf58      	it	pl
 80065f6:	6962      	ldrpl	r2, [r4, #20]
 80065f8:	60a2      	str	r2, [r4, #8]
 80065fa:	e7f4      	b.n	80065e6 <__swsetup_r+0x8e>
 80065fc:	2000      	movs	r0, #0
 80065fe:	e7f7      	b.n	80065f0 <__swsetup_r+0x98>
 8006600:	2000001c 	.word	0x2000001c

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	@ (8006620 <_sbrk_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fb f826 	bl	8001660 <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	200004cc 	.word	0x200004cc

08006624 <__swhatbuf_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	2900      	cmp	r1, #0
 800662e:	b096      	sub	sp, #88	@ 0x58
 8006630:	4615      	mov	r5, r2
 8006632:	461e      	mov	r6, r3
 8006634:	da0d      	bge.n	8006652 <__swhatbuf_r+0x2e>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800663c:	f04f 0100 	mov.w	r1, #0
 8006640:	bf14      	ite	ne
 8006642:	2340      	movne	r3, #64	@ 0x40
 8006644:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006648:	2000      	movs	r0, #0
 800664a:	6031      	str	r1, [r6, #0]
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	b016      	add	sp, #88	@ 0x58
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	466a      	mov	r2, sp
 8006654:	f000 f848 	bl	80066e8 <_fstat_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	dbec      	blt.n	8006636 <__swhatbuf_r+0x12>
 800665c:	9901      	ldr	r1, [sp, #4]
 800665e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006662:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006666:	4259      	negs	r1, r3
 8006668:	4159      	adcs	r1, r3
 800666a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800666e:	e7eb      	b.n	8006648 <__swhatbuf_r+0x24>

08006670 <__smakebuf_r>:
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006674:	079d      	lsls	r5, r3, #30
 8006676:	4606      	mov	r6, r0
 8006678:	460c      	mov	r4, r1
 800667a:	d507      	bpl.n	800668c <__smakebuf_r+0x1c>
 800667c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	2301      	movs	r3, #1
 8006686:	6163      	str	r3, [r4, #20]
 8006688:	b003      	add	sp, #12
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668c:	ab01      	add	r3, sp, #4
 800668e:	466a      	mov	r2, sp
 8006690:	f7ff ffc8 	bl	8006624 <__swhatbuf_r>
 8006694:	9f00      	ldr	r7, [sp, #0]
 8006696:	4605      	mov	r5, r0
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff fb16 	bl	8005ccc <_malloc_r>
 80066a0:	b948      	cbnz	r0, 80066b6 <__smakebuf_r+0x46>
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	059a      	lsls	r2, r3, #22
 80066a8:	d4ee      	bmi.n	8006688 <__smakebuf_r+0x18>
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	e7e2      	b.n	800667c <__smakebuf_r+0xc>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	6020      	str	r0, [r4, #0]
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066c6:	b15b      	cbz	r3, 80066e0 <__smakebuf_r+0x70>
 80066c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066cc:	4630      	mov	r0, r6
 80066ce:	f000 f81d 	bl	800670c <_isatty_r>
 80066d2:	b128      	cbz	r0, 80066e0 <__smakebuf_r+0x70>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	431d      	orrs	r5, r3
 80066e4:	81a5      	strh	r5, [r4, #12]
 80066e6:	e7cf      	b.n	8006688 <__smakebuf_r+0x18>

080066e8 <_fstat_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	@ (8006708 <_fstat_r+0x20>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f7fa ff8a 	bl	800160e <_fstat>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d102      	bne.n	8006704 <_fstat_r+0x1c>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b103      	cbz	r3, 8006704 <_fstat_r+0x1c>
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	200004cc 	.word	0x200004cc

0800670c <_isatty_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	@ (8006728 <_isatty_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa ff89 	bl	800162e <_isatty>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_isatty_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_isatty_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	200004cc 	.word	0x200004cc

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
